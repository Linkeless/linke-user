{
    "swagger": "2.0",
    "info": {
        "description": "A comprehensive service management platform with subscription-based billing, user management, and server administration. Features include OAuth2 authentication, traffic subscription management, multi-gateway payments, referral programs, and customer support system.",
        "title": "Linke API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/admin/auth/accounts/reset-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Force password reset for a specific user (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Force password reset",
                "parameters": [
                    {
                        "description": "Password reset data",
                        "name": "reset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminForcePasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/accounts/unlock": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually unlock a locked user account (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Unlock locked account",
                "parameters": [
                    {
                        "description": "Account unlock data",
                        "name": "unlock",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminAccountUnlockRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/accounts/{user_id}/security-status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive security status for a specific account (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Get account security status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/analytics/patterns": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed analysis of security patterns and anomalies (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Get security pattern analysis",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"login_patterns\"",
                        "description": "Analysis type",
                        "name": "analysis_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 30,
                        "description": "Analysis period in days",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/analytics/security-score": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive security score and recommendations (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Get overall security score",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/analytics/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive security statistics and metrics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Get overall security statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 30,
                        "description": "Statistics period in days",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/bulk/notifications": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send security notifications to multiple users (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Send security notifications",
                "parameters": [
                    {
                        "description": "Notification data",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SecurityNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/bulk/reset-passwords": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset passwords for multiple users (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Bulk reset passwords",
                "parameters": [
                    {
                        "description": "Bulk password reset data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkSecurityActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/bulk/revoke-tokens": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke JWT tokens for multiple users (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Bulk revoke user tokens",
                "parameters": [
                    {
                        "description": "Bulk revocation data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkSecurityActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/bulk/unlock-accounts": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unlock multiple user accounts (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Bulk unlock accounts",
                "parameters": [
                    {
                        "description": "Bulk unlock data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkSecurityActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/jwt/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive JWT token analytics and metrics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Get JWT token analytics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/jwt/blacklist": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of blacklisted JWT tokens (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "List JWT blacklist entries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by User ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by blacklist reason",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/jwt/revoke": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually blacklist a specific JWT token (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Revoke JWT token manually",
                "parameters": [
                    {
                        "description": "Token revocation data",
                        "name": "revoke",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminJWTRevokeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/jwt/tokens": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of active JWT tokens with filtering options (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "List active JWT tokens",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by User ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/oauth/incidents": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of OAuth security events and incidents (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "List OAuth security events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by OAuth provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/oauth/providers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics for OAuth authentication patterns by provider (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Get OAuth provider statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/security/failed-logins": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed analysis of failed login attempts and potential attacks (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "Analyze failed login patterns",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 7,
                        "description": "Analysis period in days",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/security/login-attempts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of login attempts with comprehensive filtering (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Auth-Management"
                ],
                "summary": "List login attempts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by IP address",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by success status",
                        "name": "success",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/cache/flush": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Flush all cache entries (use with caution)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Flush cache",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/cache/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive cache performance metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.MetricsReport"
                        }
                    }
                }
            }
        },
        "/admin/cache/metrics/{prefix}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get cache performance metrics for a specific prefix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache metrics by prefix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cache prefix (user, subscription, payment, etc.)",
                        "name": "prefix",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.Metrics"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/alerts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get active alerts for cache system health and performance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache system alerts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/benchmark": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Run performance benchmark on cache system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Run cache benchmark",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CacheBenchmarkResponse"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/dashboard": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive dashboard data for cache monitoring",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache dashboard data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CacheDashboardResponse"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive health status of multi-level cache system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get multi-level cache health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.CacheHealthStatus"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/invalidation/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get metrics for event-driven cache invalidation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache invalidation metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed metrics for multi-level cache system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get multi-level cache metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.MultiLevelCacheMetrics"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/performance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed performance analysis of cache system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache performance metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.PerformanceMetrics"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/warming/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get status and metrics of cache warming operations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache warming status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.WarmingMetrics"
                        }
                    }
                }
            }
        },
        "/admin/cache/monitor/warming/trigger": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually trigger cache warming for specified prefixes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Trigger cache warming",
                "parameters": [
                    {
                        "description": "Warming request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CacheWarmingResponse"
                        }
                    }
                }
            }
        },
        "/admin/cache/pattern/{pattern}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete cache entries matching a specific pattern",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Delete cache by pattern",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cache key pattern (e.g., user:*, subscription:123:*)",
                        "name": "pattern",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/cache/reset-metrics": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset all cache performance metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Reset cache metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/cache/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get low-level cache statistics from Redis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache"
                ],
                "summary": "Get cache statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cache.CacheStats"
                        }
                    }
                }
            }
        },
        "/admin/coupons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all coupons with filtering (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "List all coupons",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "inactive",
                            "expired"
                        ],
                        "type": "string",
                        "description": "Coupon status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "percentage",
                            "fixed_amount"
                        ],
                        "type": "string",
                        "description": "Coupon type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Public visibility filter",
                        "name": "is_public",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new discount coupon (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Create new coupon",
                "parameters": [
                    {
                        "description": "Coupon creation data",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed analytics for coupon performance (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Get coupon analytics",
                "parameters": [
                    {
                        "enum": [
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "30d",
                        "description": "Analytics period",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/bulk/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple coupons with auto-generated codes (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Bulk create coupons",
                "parameters": [
                    {
                        "description": "Bulk creation data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkCreateCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/bulk/deactivate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deactivate multiple coupons at once (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Bulk deactivate coupons",
                "parameters": [
                    {
                        "description": "Bulk deactivation data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkUpdateRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/bulk/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update multiple coupons at once (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Bulk update coupons",
                "parameters": [
                    {
                        "description": "Bulk update data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkUpdateRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search coupons by various criteria (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Search coupons",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (code, name, description)",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "inactive",
                            "expired"
                        ],
                        "type": "string",
                        "description": "Coupon status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "percentage",
                            "fixed_amount"
                        ],
                        "type": "string",
                        "description": "Coupon type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Public visibility filter",
                        "name": "is_public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Created after date",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Created before date",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expires after date",
                        "name": "expires_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expires before date",
                        "name": "expires_before",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum coupon value",
                        "name": "min_value",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum coupon value",
                        "name": "max_value",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum usage count",
                        "name": "min_used",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum usage count",
                        "name": "max_used",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall coupon system statistics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Get coupon statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get coupon details by coupon ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Get coupon information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update coupon details (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Update coupon information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Coupon update data",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a coupon (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Delete coupon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/{id}/extend": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Extend the expiry date of a coupon (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Extend coupon expiry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Expiry extension data",
                        "name": "extend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExtendExpiryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/{id}/toggle-status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Activate or deactivate a coupon (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Toggle coupon status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ToggleStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/coupons/{id}/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed usage statistics for a specific coupon (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Coupon-Management"
                ],
                "summary": "Get coupon usage details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all invoices with optional filtering (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "List all invoices",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "draft",
                            "sent",
                            "paid",
                            "overdue",
                            "cancelled",
                            "voided"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "standard",
                            "proforma",
                            "credit_note"
                        ],
                        "type": "string",
                        "description": "Filter by type",
                        "name": "invoice_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date filter (YYYY-MM-DD)",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date filter (YYYY-MM-DD)",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter overdue invoices",
                        "name": "is_overdue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new invoice (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Create invoice",
                "parameters": [
                    {
                        "description": "Invoice creation data",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminCreateInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed invoice analytics with various breakdowns (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Get invoice analytics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date for analytics",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for analytics",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group by: day, week, month, year",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Breakdown by: status, type, country",
                        "name": "breakdown",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/bulk/mark-paid": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark multiple invoices as paid in bulk (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Bulk mark invoices as paid",
                "parameters": [
                    {
                        "description": "Bulk mark paid request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkInvoiceActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/bulk/regenerate-pdf": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Regenerate PDFs for multiple invoices in bulk (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Bulk regenerate invoice PDFs",
                "parameters": [
                    {
                        "description": "Bulk PDF regeneration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkInvoiceActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/bulk/resend": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resend multiple invoices via email in bulk (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Bulk resend invoices",
                "parameters": [
                    {
                        "description": "Bulk resend request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkInvoiceActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/bulk/void": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Void multiple invoices in bulk (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Bulk void invoices",
                "parameters": [
                    {
                        "description": "Bulk void request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkInvoiceActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/languages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of available invoice languages (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Get available invoice languages",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/overdue": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of overdue invoices with details (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Get overdue invoices",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum days overdue filter",
                        "name": "days_overdue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Advanced search for invoices with multiple criteria (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Search invoices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (invoice number, billing name, email)",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by invoice type",
                        "name": "invoice_type",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "float64",
                        "description": "Minimum amount filter",
                        "name": "amount_min",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "float64",
                        "description": "Maximum amount filter",
                        "name": "amount_max",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date filter",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date filter",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter overdue invoices",
                        "name": "is_overdue",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by billing country",
                        "name": "billing_country",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment method",
                        "name": "payment_method",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter invoices with company information",
                        "name": "has_company_info",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive invoice statistics and metrics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Get invoice statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/templates": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of available invoice PDF templates (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Get available invoice templates",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get invoice details by ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Get invoice details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update invoice details (Admin only). Only draft invoices can be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Update invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invoice update data",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminUpdateInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete an invoice (Admin only). Only draft invoices can be deleted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Delete invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/{id}/mark-paid": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually mark an invoice as paid (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Mark invoice as paid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Mark paid request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.MarkPaidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/{id}/regenerate-pdf": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Regenerate PDF for an invoice with optional custom options (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Regenerate invoice PDF",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PDF generation options",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegeneratePDFRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/{id}/resend-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resend invoice email to customer (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Resend invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resend request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResendInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/invoices/{id}/void": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Void an invoice with reason (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Void invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Void request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.VoidInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/orders/{id}/generate-invoice": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new invoice from an existing subscription order (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Invoice-Management"
                ],
                "summary": "Create invoice from subscription order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invoice creation options",
                        "name": "options",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateInvoiceFromOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/payment/configs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get payment configurations with filtering and pagination. Configs use method-based structure (epay, crypto_btc, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Payment-Management"
                ],
                "summary": "[Admin] Get payment configs",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"epay\"",
                        "description": "Filter by payment method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by enabled status",
                        "name": "is_enabled",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new payment configuration with simplified structure (method + url + pid + key)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Payment-Management"
                ],
                "summary": "[Admin] Create payment config",
                "parameters": [
                    {
                        "description": "Payment config data with method (epay/crypto), URL, PID, and Key",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePaymentConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/payment/configs/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a payment configuration. Supports method-based structure with URL, PID, Key fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Payment-Management"
                ],
                "summary": "[Admin] Update payment config",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment config ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated payment config data (URL, PID, Key, etc.)",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePaymentConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a payment configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Payment-Management"
                ],
                "summary": "[Admin] Delete payment config",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment config ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all referrals with filtering (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "List all referrals",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "confirmed",
                            "rewarded",
                            "cancelled"
                        ],
                        "type": "string",
                        "description": "Referral status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "earned",
                            "paid",
                            "cancelled"
                        ],
                        "type": "string",
                        "description": "Reward status",
                        "name": "reward_status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Campaign ID filter",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Referrer user ID filter",
                        "name": "referrer_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Referee user ID filter",
                        "name": "referee_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new referral relationship (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Create new referral",
                "parameters": [
                    {
                        "description": "Referral creation data",
                        "name": "referral",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed analytics for referral performance (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Get referral analytics",
                "parameters": [
                    {
                        "enum": [
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "30d",
                        "description": "Analytics period",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/bulk/approve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Approve multiple referrals at once (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Bulk approve referrals",
                "parameters": [
                    {
                        "description": "Bulk approval data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/bulk/payout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Process payouts for multiple referrals at once (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Bulk process referral payouts",
                "parameters": [
                    {
                        "description": "Bulk payout data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/campaigns": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all referral campaigns (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "List referral campaigns",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "paused",
                            "ended"
                        ],
                        "type": "string",
                        "description": "Campaign status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new referral campaign (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Create referral campaign",
                "parameters": [
                    {
                        "description": "Campaign creation data",
                        "name": "campaign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReferralCampaignRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralCampaignResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/invite-codes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all invite codes (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "List invite codes",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "used",
                            "disabled"
                        ],
                        "type": "string",
                        "description": "Invite code status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search referrals by various criteria (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Search referrals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "confirmed",
                            "rewarded",
                            "cancelled"
                        ],
                        "type": "string",
                        "description": "Referral status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "earned",
                            "paid",
                            "cancelled"
                        ],
                        "type": "string",
                        "description": "Reward status",
                        "name": "reward_status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Referrer user ID",
                        "name": "referrer_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Referee user ID",
                        "name": "referee_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Campaign ID",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date from",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date to",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum reward amount",
                        "name": "min_reward",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum reward amount",
                        "name": "max_reward",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall referral system statistics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Get referral statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get referral details by referral ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Get referral information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Referral ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update referral details (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Update referral information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Referral ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Referral update data",
                        "name": "referral",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/{id}/approve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Approve a pending referral and set reward amount (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Approve referral",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Referral ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Approval data",
                        "name": "approve",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ApproveReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/{id}/payout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Process payout for a referral reward (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Process referral payout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Referral ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payout data",
                        "name": "payout",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PayoutReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/referrals/{id}/reject": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reject a pending referral (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Referral-Management"
                ],
                "summary": "Reject referral",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Referral ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rejection data",
                        "name": "reject",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RejectReferralRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/server-groups": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all server groups (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "List all server groups",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new server group (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "Create new server group",
                "parameters": [
                    {
                        "description": "Server group creation data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateServerGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.ServerGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/server-groups/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics for all server groups (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Get all groups statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/server-groups/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get server group details by group ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "Get server group information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.ServerGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update server group information (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Update server group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Server group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateServerGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.ServerGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a server group (admin only). Note: This will fail if group has servers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Delete server group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Partially update server group information using PATCH method (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Partially update server group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial server group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PatchServerGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.ServerGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/server-groups/{id}/servers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all servers belonging to a specific group (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Get servers in a group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/server-groups/{id}/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get server group statistics and metrics (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Get server group statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all shadowsocks servers (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "List all shadowsocks servers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by server group ID",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by visibility (0 or 1)",
                        "name": "show",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by server name (substring match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "sort",
                            "created_at",
                            "updated_at",
                            "name",
                            "rate"
                        ],
                        "type": "string",
                        "default": "sort",
                        "description": "Sort by field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new shadowsocks server (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "Create new shadowsocks server",
                "parameters": [
                    {
                        "description": "Server creation data",
                        "name": "server",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateShadowsocksServerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.ShadowsocksServerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers/bulk/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update multiple servers at once (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Bulk update servers",
                "parameters": [
                    {
                        "description": "Bulk update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkUpdateServersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers/group/{group_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all servers in a specific group (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Get servers by group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get server details by server ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "Get server information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.ShadowsocksServerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update shadowsocks server information (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Update shadowsocks server",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Server data",
                        "name": "server",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateShadowsocksServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.ShadowsocksServerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a shadowsocks server (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Delete server",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Partially update server information using PATCH method (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Partially update server",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial server data",
                        "name": "server",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PatchShadowsocksServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.ShadowsocksServerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers/{id}/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check server health status (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Check server health",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers/{id}/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get server statistics and metrics (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Get server statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/servers/{id}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update server status (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Server-Management"
                ],
                "summary": "[Admin] Update server status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Server ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateServerStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/alerts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get usage alerts with filtering options (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Usage-Alerts"
                ],
                "summary": "Get usage alerts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by subscription ID",
                        "name": "user_subscription_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by usage type",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "fired",
                            "resolved",
                            "suppressed",
                            "acknowledged"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/alerts/bulk/resolve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resolve multiple usage alerts (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Usage-Alerts"
                ],
                "summary": "Bulk resolve alerts",
                "parameters": [
                    {
                        "description": "Bulk resolve data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.BulkResolveAlertsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/alerts/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get usage alert statistics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Usage-Alerts"
                ],
                "summary": "Get alert statistics",
                "parameters": [
                    {
                        "enum": [
                            "24h",
                            "7d",
                            "30d",
                            "90d",
                            "365d"
                        ],
                        "type": "string",
                        "default": "7d",
                        "description": "Statistics period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by usage type",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/analytics/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get subscription order statistics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Analytics"
                ],
                "summary": "Get order statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/analytics/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall subscription statistics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Analytics"
                ],
                "summary": "Get subscription statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/bulk/action": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Perform bulk actions on multiple subscriptions (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Bulk"
                ],
                "summary": "Bulk subscription actions",
                "parameters": [
                    {
                        "description": "Bulk action data",
                        "name": "bulk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkSubscriptionActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all subscription orders (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Orders"
                ],
                "summary": "List subscription orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by order type",
                        "name": "order_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter from date (YYYY-MM-DD)",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter to date (YYYY-MM-DD)",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get subscription order details by ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Orders"
                ],
                "summary": "Get subscription order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/orders/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a pending subscription order (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Orders"
                ],
                "summary": "Cancel subscription order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancel data",
                        "name": "cancel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reason": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/plans": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all subscription plans (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "List subscription plans",
                "parameters": [
                    {
                        "enum": [
                            "active",
                            "inactive",
                            "archived"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"USD\"",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by visibility",
                        "name": "visible",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by popular flag",
                        "name": "popular",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by recommended flag",
                        "name": "recommended",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new subscription plan (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Create subscription plan",
                "parameters": [
                    {
                        "description": "Plan creation data",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreatePlanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/plans/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get subscription plan details by ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Get subscription plan",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update subscription plan details (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Update subscription plan",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Plan update data",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePlanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a subscription plan (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Delete subscription plan",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/plans/{id}/toggle-status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Toggle subscription plan active/inactive status (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Toggle subscription plan status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/usage/{id}/current": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current usage for a subscription (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Usage-Management"
                ],
                "summary": "Get current usage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Usage type filter",
                        "name": "usage_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/usage/{id}/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get usage statistics for a subscription (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Usage-Management"
                ],
                "summary": "Get usage statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all user subscriptions (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "List all user subscriptions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "paused",
                            "cancelled",
                            "expired",
                            "trial"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a subscription for a user directly (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Create user subscription",
                "parameters": [
                    {
                        "description": "Subscription creation data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminCreateUserSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user subscription details by ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Get user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user subscription details (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Update user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription update data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminUpdateUserSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a user subscription (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Cancel user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancel data",
                        "name": "cancel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cancel_at_period_end": {
                                    "type": "boolean"
                                },
                                "reason": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/downgrade": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Downgrade a user's subscription to a lower plan (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Management"
                ],
                "summary": "Downgrade user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Downgrade request",
                        "name": "downgrade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.DowngradeSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/extend": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Extend a user subscription by specified days (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Extend user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Extension data",
                        "name": "extend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExtendSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/pause": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pause a user subscription (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Pause user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pause request data",
                        "name": "pause",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.PauseSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/reset-traffic": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset traffic usage for a user subscription (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Reset traffic usage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reset data",
                        "name": "reset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminUsageResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/resume": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resume a paused user subscription (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "Resume user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resume request data",
                        "name": "resume",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.ResumeSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/users/{id}/upgrade": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upgrade a user's subscription to a higher plan (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription-Management"
                ],
                "summary": "Upgrade user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upgrade request",
                        "name": "upgrade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.UpgradeSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/{id}/pause": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pause a user subscription (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "[Admin] Pause user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pause subscription request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.PauseSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/{id}/resume": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resume a paused user subscription (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Subscription"
                ],
                "summary": "[Admin] Resume user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resume subscription request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.ResumeSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all tickets with filtering options (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "List all tickets",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 123,
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 456,
                        "description": "Filter by assigned agent ID",
                        "name": "assigned_to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "open",
                            "in_progress",
                            "pending",
                            "resolved",
                            "closed"
                        ],
                        "type": "string",
                        "example": "open",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "normal",
                            "high",
                            "urgent",
                            "critical"
                        ],
                        "type": "string",
                        "example": "high",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "general",
                            "technical",
                            "billing",
                            "account",
                            "feature",
                            "bug",
                            "subscription",
                            "payment"
                        ],
                        "type": "string",
                        "example": "technical",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"login issue\"",
                        "description": "Search in title, description, or ticket number",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new support ticket (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Create new ticket",
                "parameters": [
                    {
                        "description": "Ticket creation data",
                        "name": "ticket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminCreateTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/agents": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of admin users who can be assigned tickets (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "List available agents",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed ticket analytics with time-based grouping (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Get ticket analytics",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "example": "\"2024-01-01\"",
                        "description": "Start date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "example": "\"2024-12-31\"",
                        "description": "End date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "day",
                            "week",
                            "month",
                            "agent",
                            "category",
                            "priority"
                        ],
                        "type": "string",
                        "example": "\"day\"",
                        "description": "Group by period",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 456,
                        "description": "Filter by agent ID",
                        "name": "agent_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "general",
                            "technical",
                            "billing",
                            "account",
                            "feature",
                            "bug",
                            "subscription",
                            "payment"
                        ],
                        "type": "string",
                        "example": "technical",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "normal",
                            "high",
                            "urgent",
                            "critical"
                        ],
                        "type": "string",
                        "example": "high",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/bulk/assign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign multiple tickets to an agent (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Bulk assign tickets",
                "parameters": [
                    {
                        "description": "Bulk assignment data",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkTicketActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/bulk/close": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Close multiple tickets (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Bulk close tickets",
                "parameters": [
                    {
                        "description": "Bulk closure data",
                        "name": "closure",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkTicketActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/bulk/status": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update status of multiple tickets (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Bulk update ticket status",
                "parameters": [
                    {
                        "description": "Bulk status update data",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BulkTicketActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Advanced ticket search with multiple filters (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Search tickets",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"login issue\"",
                        "description": "Search query",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 123,
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 456,
                        "description": "Filter by assigned agent ID",
                        "name": "assigned_to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "open",
                            "in_progress",
                            "pending",
                            "resolved",
                            "closed"
                        ],
                        "type": "string",
                        "example": "open",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "normal",
                            "high",
                            "urgent",
                            "critical"
                        ],
                        "type": "string",
                        "example": "high",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "general",
                            "technical",
                            "billing",
                            "account",
                            "feature",
                            "bug",
                            "subscription",
                            "payment"
                        ],
                        "type": "string",
                        "example": "technical",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "example": "\"2024-01-01\"",
                        "description": "Created after date",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "example": "\"2024-12-31\"",
                        "description": "Created before date",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"urgent,billing\"",
                        "description": "Filter by tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive ticket statistics (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Get ticket statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed ticket information including messages (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Get ticket details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update ticket information (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Update ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ticket update data",
                        "name": "ticket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminUpdateTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a support ticket (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Delete ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/assign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign ticket to an agent (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Assign ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assignment data",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/close": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Close a support ticket (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Close ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/escalate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Escalate ticket to higher priority or different agent (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Escalate ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Escalation data",
                        "name": "escalation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EscalateTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all messages for a ticket including internal notes (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Get ticket messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Include internal notes",
                        "name": "include_internal",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add admin reply or internal note to ticket (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Add message to ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminTicketMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/messages/{msg_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed message information (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Get message details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Message ID",
                        "name": "msg_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update message content or metadata (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Update message",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Message ID",
                        "name": "msg_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message update data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTicketMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a message (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Delete message",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Message ID",
                        "name": "msg_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/notes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add internal note to ticket (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Add internal note",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Internal note data",
                        "name": "note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminTicketMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/tickets/{id}/reopen": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reopen a closed support ticket (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-Ticket-Management"
                ],
                "summary": "Reopen ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all users (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "List all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by email/username/name (substring match)",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "inactive",
                            "banned"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "user",
                            "admin"
                        ],
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "local",
                            "google",
                            "github",
                            "telegram"
                        ],
                        "type": "string",
                        "description": "Filter by provider",
                        "name": "provider",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user account (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User creation data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/bulk/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete multiple users (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Batch delete users",
                "parameters": [
                    {
                        "description": "User IDs",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BatchUserIDsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/bulk/restore": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restore multiple soft deleted users (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Batch restore users",
                "parameters": [
                    {
                        "description": "User IDs",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BatchUserIDsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/deleted": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of soft deleted users with pagination (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] List deleted users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/provider": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get users filtered by OAuth provider with pagination (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] List users by provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider (google, github, telegram)",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search users by name, email, or username with pagination (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Search users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall user statistics (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Get user statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user details by user ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "Get user information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update any user information (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Update any user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete any user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Soft delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Partially update user information using PATCH method (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Partially update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PatchUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/hard-delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently delete a user from database (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Hard delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/reset-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset a user's password (Admin only). Only works for local accounts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/restore": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restore a soft deleted user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Restore user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/role": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user role (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Update user role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user status (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin-User-Management"
                ],
                "summary": "[Admin] Update user status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/app/system/health": {
            "get": {
                "description": "检查系统各组件健康状态",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System-Health"
                ],
                "summary": "系统健康检查",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change password for local account users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "passwords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login with email and password",
                "summary": "User login with email/password",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout user (server-side token revocation)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh an existing JWT token",
                "summary": "Refresh JWT token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with email and password. Username and name are auto-generated from email. Optional invite code can be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration data (email, password, and optional invite_code)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/telegram/widget": {
            "get": {
                "description": "Get Telegram Login Widget HTML for frontend integration",
                "summary": "Get Telegram Login Widget",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Exchange OAuth authorization code for JWT tokens",
                "summary": "Exchange authorization code for tokens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/url": {
            "post": {
                "description": "Generate OAuth authorization URL for frontend applications",
                "summary": "Get OAuth authorization URL",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthorizeURLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/{provider}": {
            "get": {
                "description": "Initiate OAuth login for various providers",
                "tags": [
                    "auth"
                ],
                "summary": "OAuth login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (google, github, telegram)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "redirect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/auth/{provider}/callback": {
            "get": {
                "description": "Handle OAuth callback from providers",
                "summary": "OAuth callback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/coupons": {
            "get": {
                "description": "Get list of public coupons available to all users (no authentication required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Get public coupons",
                "parameters": [
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CouponResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/coupons/my-usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's coupon usage records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Get my coupon usage history",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/coupons/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validate a coupon code for a specific user and order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Validate coupon code",
                "parameters": [
                    {
                        "description": "Coupon validation data",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ValidateCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ValidateCouponResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific invoice by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "[User/Admin] Get invoice by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download an invoice as PDF with custom template and language options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "[User/Admin] Download invoice as PDF with options",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "default",
                            "professional",
                            "minimal"
                        ],
                        "type": "string",
                        "description": "PDF Template",
                        "name": "template",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "en",
                            "zh",
                            "es"
                        ],
                        "type": "string",
                        "description": "Language",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Watermark text",
                        "name": "watermark",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/analytics": {
            "get": {
                "description": "Get analytics and statistics for notifications within a time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "tracking",
                    "analytics"
                ],
                "summary": "Get notification analytics",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"24h ago\"",
                        "description": "Start date (RFC3339 format)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"now\"",
                        "description": "End date (RFC3339 format)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated user IDs to filter by",
                        "name": "user_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated event types to filter by",
                        "name": "event_types",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated channels to filter by",
                        "name": "channels",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated statuses to filter by",
                        "name": "statuses",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notification.NotificationAnalytics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/status/summary": {
            "get": {
                "description": "Get a summary of notification statuses for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "tracking"
                ],
                "summary": "Get notification status summary",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notification.NotificationStatusSummary"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{request_id}/status": {
            "get": {
                "description": "Get detailed status information for a specific notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "tracking"
                ],
                "summary": "Get notification status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification Request ID",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notification.NotificationTrackingInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get my orders",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new subscription order with invoice and payment record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Create order with complete invoice and payment flow",
                "parameters": [
                    {
                        "description": "Order creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/pay": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a payment record for an existing subscription order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Create payment for existing order",
                "parameters": [
                    {
                        "description": "Payment creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PayOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get order details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}/invoice": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate an invoice for an existing subscription order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Generate invoice for existing order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Aggregate order with latest payment and invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get order summary (order + latest payment + latest invoice)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment-methods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all payment methods for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "List all payment methods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by payment gateway",
                        "name": "gateway",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show only active payment methods",
                        "name": "active_only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new payment method for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Create a new payment method",
                "parameters": [
                    {
                        "description": "Payment method creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePaymentMethodRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/payment-methods/default": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the default payment method for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Get default payment method",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by payment gateway",
                        "name": "gateway",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/payment-methods/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific payment method for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Get a payment method by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of an existing payment method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Update a payment method",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment method update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePaymentMethodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a payment method for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Delete a payment method",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/payment-methods/{id}/default": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set a payment method as the default for the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Set a payment method as default",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/payment-methods/{id}/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve usage statistics for a specific payment method",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Get payment method usage statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/payment-methods/{id}/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validate a payment method with the payment gateway",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "Validate a payment method",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/payment/configs": {
            "get": {
                "description": "Get active payment configurations for public display. Returns simplified method-based configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "[Public] Get active payment configs",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"CNY\"",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PaymentConfigResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/methods": {
            "get": {
                "description": "Get available payment methods organized by gateway. Returns enabled payment gateways and their supported methods (epay: alipay, wechat, qqpay). No authentication required.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "[Public] Get available payment methods",
                "responses": {
                    "200": {
                        "description": "Returns map of gateway to supported payment methods",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve payment methods from database",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/notify/{gateway}": {
            "post": {
                "description": "Handle payment notification callbacks from payment gateways. Supports epay gateway with MD5 signature verification and anti-replay protection. Updates payment status and triggers subscription activation on successful payment.",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "[Webhook] Payment notification callback",
                "parameters": [
                    {
                        "enum": [
                            "epay"
                        ],
                        "type": "string",
                        "description": "Payment gateway name",
                        "name": "gateway",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success\" \"Payment processed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "fail\" \"Invalid gateway, signature verification failed, or malformed request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "fail\" \"Internal processing error or database failure",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payment/orders": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new payment order for invoice or subscription. Supports epay gateway with Alipay, WeChat Pay, and QQ Pay. Includes anti-replay protection and secure payment URL generation. Either invoice_id or subscription_order_id must be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "[User] Create payment order",
                "parameters": [
                    {
                        "description": "Payment order data with gateway (epay), method (alipay/wechat/qqpay), amount, and either invoice_id or subscription_order_id",
                        "name": "payment_order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePaymentOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns payment record with payment URL, QR code, and expiration time",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentRecordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data, unsupported payment method, or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "422": {
                        "description": "Amount outside valid range or gateway configuration error",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Payment gateway error or database failure",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/orders/my": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's payment orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "[User] Get my payment orders",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/orders/{payment_no}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get payment order details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Payment"
                ],
                "summary": "[User] Get payment order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment number",
                        "name": "payment_no",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaymentRecordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/server/UniProxy/config": {
            "get": {
                "description": "Get configuration for UniProxy server based on node_id and node_type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Server"
                ],
                "summary": "Get UniProxy Server Config",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "node_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Node Type (shadowsocks)",
                        "name": "node_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authentication Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UniProxyConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    }
                }
            }
        },
        "/server/UniProxy/health": {
            "get": {
                "description": "Health check endpoint for server API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Server"
                ],
                "summary": "Server API Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ServerAPIHealthResponse"
                        }
                    }
                }
            }
        },
        "/server/UniProxy/push": {
            "post": {
                "description": "Receive and log data push from UniProxy nodes (shadowsocks, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Server"
                ],
                "summary": "UniProxy Node Data Push",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "node_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "shadowsocks"
                        ],
                        "type": "string",
                        "description": "Node Type",
                        "name": "node_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authentication Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UniProxyPushResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/server/UniProxy/user": {
            "get": {
                "description": "Get users with active subscriptions that have access to the specified shadowsocks server. Returns all valid subscriptions, including multiple subscriptions for the same user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Server"
                ],
                "summary": "Get UniProxy Users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "node_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Node Type (shadowsocks)",
                        "name": "node_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authentication Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UniProxyUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    }
                }
            }
        },
        "/subscription/plans": {
            "get": {
                "description": "Get a list of visible subscription plans for purchase",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public-Subscription-Plans"
                ],
                "summary": "Get available subscription plans",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"USD\"",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscription/plans/code/{code}": {
            "get": {
                "description": "Get detailed information about a subscription plan using its unique code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public-Subscription-Plans"
                ],
                "summary": "Get subscription plan by code",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"premium-monthly\"",
                        "description": "Plan Code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscription/plans/popular": {
            "get": {
                "description": "Get a list of popular/recommended subscription plans",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public-Subscription-Plans"
                ],
                "summary": "Get popular subscription plans",
                "parameters": [
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "example": 5,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscription/plans/{id}": {
            "get": {
                "description": "Get detailed information about a specific subscription plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public-Subscription-Plans"
                ],
                "summary": "Get subscription plan details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/clash": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return Clash-compatible YAML built from user's accessible servers",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get Clash subscription YAML",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription token (Bearer token also supported)",
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "YAML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/my": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's subscriptions with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get my subscriptions",
                "parameters": [
                    {
                        "enum": [
                            "active",
                            "paused",
                            "cancelled",
                            "expired",
                            "trial"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/my/active": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's active subscriptions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get my active subscriptions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.UserSubscriptionResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get subscription details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Cancel subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancel request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CancelSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/traffic-stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get traffic statistics for a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "[User] Get subscription traffic statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TrafficStatsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create and enqueue a new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System-Task"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task details",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current status of the task queue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System-Task"
                ],
                "summary": "Get queue status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new support ticket for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Tickets"
                ],
                "summary": "Create new ticket",
                "parameters": [
                    {
                        "description": "Ticket creation data",
                        "name": "ticket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreateTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets/my": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of tickets created by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Tickets"
                ],
                "summary": "Get user's tickets",
                "parameters": [
                    {
                        "enum": [
                            "open",
                            "in_progress",
                            "pending",
                            "resolved",
                            "closed"
                        ],
                        "type": "string",
                        "example": "open",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "normal",
                            "high",
                            "urgent",
                            "critical"
                        ],
                        "type": "string",
                        "example": "high",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "general",
                            "technical",
                            "billing",
                            "account",
                            "feature",
                            "bug",
                            "subscription",
                            "payment"
                        ],
                        "type": "string",
                        "example": "subscription",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"subscription issue\"",
                        "description": "Search in title or description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed ticket information including messages (user can only access own tickets)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Tickets"
                ],
                "summary": "Get ticket details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            }
        },
        "/tickets/{id}/close": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Close a support ticket (user can only close own tickets)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Tickets"
                ],
                "summary": "Close ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Closure reason",
                        "name": "closure",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.CloseTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets/{id}/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get messages for a ticket (user can only access messages for own tickets, excluding internal notes)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Tickets"
                ],
                "summary": "Get ticket messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HALCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a message to a ticket (user can only add messages to own tickets)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Tickets"
                ],
                "summary": "Add message to ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserTicketMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.TicketMessageUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/alert/{alert_id}/acknowledge": {
            "post": {
                "description": "Mark a usage alert as acknowledged",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Acknowledge a usage alert",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Alert ID",
                        "name": "alert_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acknowledge Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.AcknowledgeAlertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/alert/{alert_id}/resolve": {
            "post": {
                "description": "Mark a usage alert as resolved",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Resolve a usage alert",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Alert ID",
                        "name": "alert_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resolve Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResolveAlertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/alert/{alert_id}/suppress": {
            "post": {
                "description": "Suppress a usage alert for a specified duration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Suppress a usage alert",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Alert ID",
                        "name": "alert_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Suppress Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SuppressAlertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/bulk-resolve": {
            "post": {
                "description": "Resolve multiple usage alerts at once",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Bulk resolve usage alerts",
                "parameters": [
                    {
                        "description": "Bulk Resolve Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.BulkResolveAlertsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.BulkResolveAlertsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/config/{config_id}": {
            "get": {
                "description": "Retrieve details of a specific alert configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get a specific alert configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Configuration ID",
                        "name": "config_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.AlertConfigurationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing alert configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Update an alert configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Configuration ID",
                        "name": "config_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.UpdateAlertConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.AlertConfigurationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete (soft delete) an alert configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Delete an alert configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Configuration ID",
                        "name": "config_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/configurations": {
            "post": {
                "description": "Create a new alert configuration for usage monitoring",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Create a new alert configuration",
                "parameters": [
                    {
                        "description": "Alert Configuration Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.CreateAlertConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.AlertConfigurationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/subscription/{subscription_id}": {
            "get": {
                "description": "Retrieve usage alerts with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get usage alerts for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Alert Configuration ID Filter",
                        "name": "alert_configuration_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "fired",
                            "resolved",
                            "suppressed",
                            "acknowledged"
                        ],
                        "type": "string",
                        "description": "Status Filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "type": "string",
                        "description": "Severity Filter",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Active Status Filter",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Resolved Status Filter",
                        "name": "is_resolved",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 50,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "fired_at",
                            "resolved_at",
                            "severity",
                            "usage_percent"
                        ],
                        "type": "string",
                        "default": "fired_at",
                        "description": "Order By",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Order Direction",
                        "name": "order_direction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.GetUsageAlertsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/subscription/{subscription_id}/configurations": {
            "get": {
                "description": "Retrieve all alert configurations for a specific subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert configurations for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Enabled Status Filter",
                        "name": "is_enabled",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "critical"
                        ],
                        "type": "string",
                        "description": "Priority Filter",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 50,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "threshold",
                            "priority",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Order By",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Order Direction",
                        "name": "order_direction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.GetAlertConfigsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/subscription/{subscription_id}/history": {
            "get": {
                "description": "Retrieve detailed alert history with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert history for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Alert Configuration ID Filter",
                        "name": "alert_configuration_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Include resolved alerts",
                        "name": "include_resolved",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include notification history",
                        "name": "include_notifications",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 50,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.AlertHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/subscription/{subscription_id}/statistics": {
            "get": {
                "description": "Retrieve detailed alert statistics and trends",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert statistics for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "type": "string",
                        "description": "Severity Filter",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "24h",
                            "7d",
                            "30d",
                            "90d",
                            "365d"
                        ],
                        "type": "string",
                        "default": "30d",
                        "description": "Time Period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hour",
                            "day",
                            "week",
                            "month",
                            "severity",
                            "usage_type"
                        ],
                        "type": "string",
                        "description": "Group By",
                        "name": "group_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.AlertStatisticsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-alerts/test-notification": {
            "post": {
                "description": "Send a test notification to verify channel configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Test a notification channel",
                "parameters": [
                    {
                        "description": "Test Notification Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.TestNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.TestNotificationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/admin/cleanup": {
            "post": {
                "description": "Remove old usage data and alerts (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Cleanup old usage data",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Delete data older than this date (RFC3339)",
                        "name": "older_than",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.CleanupResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/admin/reset/{subscription_id}": {
            "post": {
                "description": "Reset usage counters for a specific subscription and usage type (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Reset usage for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "traffic",
                            "api_call",
                            "storage",
                            "bandwidth",
                            "connections"
                        ],
                        "type": "string",
                        "description": "Usage Type",
                        "name": "usage_type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/admin/sync/{subscription_id}": {
            "post": {
                "description": "Sync usage limits with subscription plan settings (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Sync subscription limits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/export": {
            "post": {
                "description": "Export usage data in various formats (CSV, JSON, XLSX)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Export usage data",
                "parameters": [
                    {
                        "description": "Export Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interfaces.ExportUsageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.ExportUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/top": {
            "get": {
                "description": "Retrieve subscriptions with highest usage for administration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Get top usage subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "24h",
                        "description": "Time Period (e.g., 24h, 7d, 30d)",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "total_usage",
                            "average_usage",
                            "peak_usage"
                        ],
                        "type": "string",
                        "default": "total_usage",
                        "description": "Order By",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include zero usage subscriptions",
                        "name": "include_zero",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.TopUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/current": {
            "get": {
                "description": "Retrieve current usage statistics for all usage types of a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get current usage for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.CurrentUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/current/{usage_type}": {
            "get": {
                "description": "Retrieve current usage statistics for a specific usage type of a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get current usage for a specific usage type",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "traffic",
                            "api_call",
                            "storage",
                            "bandwidth",
                            "connections"
                        ],
                        "type": "string",
                        "description": "Usage Type",
                        "name": "usage_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.CurrentUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/history": {
            "get": {
                "description": "Retrieve historical usage data with configurable time range and granularity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get usage history for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hourly",
                            "daily",
                            "weekly",
                            "monthly"
                        ],
                        "type": "string",
                        "default": "daily",
                        "description": "Data Granularity",
                        "name": "granularity",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 50,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include detailed breakdown",
                        "name": "include_details",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Source Type Filter",
                        "name": "source_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.UsageHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/predictions": {
            "get": {
                "description": "Retrieve usage predictions for all usage types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get usage predictions for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.UsagePrediction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/predictions/{usage_type}": {
            "get": {
                "description": "Retrieve usage predictions for a specific usage type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get usage predictions for a specific usage type",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "traffic",
                            "api_call",
                            "storage",
                            "bandwidth",
                            "connections"
                        ],
                        "type": "string",
                        "description": "Usage Type",
                        "name": "usage_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.UsagePrediction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/realtime": {
            "get": {
                "description": "Retrieve real-time usage data with current rates and predictions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get real-time usage data for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.RealTimeUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/statistics": {
            "get": {
                "description": "Retrieve detailed usage statistics with breakdown by various dimensions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get usage statistics for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "monthly",
                        "description": "Time Period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group By Dimensions (comma-separated)",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include period comparison",
                        "name": "include_comparison",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.UsageStatistics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/summary": {
            "get": {
                "description": "Retrieve aggregated usage summary for a specific period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get usage summary for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "daily",
                            "weekly",
                            "monthly",
                            "custom"
                        ],
                        "type": "string",
                        "default": "monthly",
                        "description": "Time Period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Period Start Time (RFC3339)",
                        "name": "period_start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Period End Time (RFC3339)",
                        "name": "period_end",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated usage types filter",
                        "name": "usage_types",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include detailed breakdown",
                        "name": "include_breakdown",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include usage predictions",
                        "name": "include_predictions",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Compare with previous period",
                        "name": "compare_with_previous",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UsageSummary"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage/{subscription_id}/trends": {
            "get": {
                "description": "Retrieve usage trends with optional anomaly detection and predictions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Subscription"
                ],
                "summary": "Get usage trends for a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Usage Type Filter",
                        "name": "usage_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "7d",
                            "30d",
                            "90d",
                            "365d"
                        ],
                        "type": "string",
                        "default": "30d",
                        "description": "Time Period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hourly",
                            "daily",
                            "weekly"
                        ],
                        "type": "string",
                        "default": "daily",
                        "description": "Data Granularity",
                        "name": "granularity",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include usage predictions",
                        "name": "include_predictions",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include anomaly detection",
                        "name": "include_anomalies",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/interfaces.UsageTrendsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/bindings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all third-party account bindings for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-bindings"
                ],
                "summary": "Get user's account bindings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.BindingListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/user/bindings/{provider}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific third-party account binding for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-bindings"
                ],
                "summary": "Get a specific account binding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name (google, github, telegram)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserAccountBindingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a third-party account binding for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-bindings"
                ],
                "summary": "Update an account binding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name (google, github, telegram)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated binding data",
                        "name": "binding",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserAccountBindingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Bind a third-party account (Google, GitHub, Telegram) to the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-bindings"
                ],
                "summary": "Bind a third-party account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name (google, github, telegram)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Binding data",
                        "name": "binding",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreateBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.UserAccountBindingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a third-party account binding from the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-bindings"
                ],
                "summary": "Unbind a third-party account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name (google, github, telegram)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/user/bindings/{provider}/primary": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set a third-party account binding as the primary one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-bindings"
                ],
                "summary": "Set primary account binding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name (google, github, telegram)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Profile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update current user's profile information (limited fields)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Profile"
                ],
                "summary": "[User] Update own profile",
                "parameters": [
                    {
                        "description": "User profile data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserProfileUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ProblemJSONResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/notifications/history": {
            "get": {
                "description": "Get notification history for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "tracking",
                    "users"
                ],
                "summary": "Get user notification history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of notifications to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notification.UserNotificationHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.InternalServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cache.CacheHealthStatus": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "issues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metrics": {
                    "$ref": "#/definitions/cache.MultiLevelCacheMetrics"
                },
                "overall": {
                    "type": "string"
                },
                "performance": {
                    "$ref": "#/definitions/cache.PerformanceMetrics"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "cache.CacheStats": {
            "type": "object",
            "properties": {
                "deletes": {
                    "type": "integer",
                    "format": "int64"
                },
                "evictions": {
                    "type": "integer",
                    "format": "int64"
                },
                "hitRate": {
                    "type": "number",
                    "format": "float64"
                },
                "hits": {
                    "type": "integer",
                    "format": "int64"
                },
                "memoryUsed": {
                    "type": "integer",
                    "format": "int64"
                },
                "misses": {
                    "type": "integer",
                    "format": "int64"
                },
                "sets": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalKeys": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "cache.MemoryCacheMetrics": {
            "type": "object"
        },
        "cache.Metrics": {
            "type": "object",
            "properties": {
                "deletes": {
                    "type": "integer"
                },
                "error_rate": {
                    "type": "number"
                },
                "errors": {
                    "type": "integer"
                },
                "evictions": {
                    "type": "integer"
                },
                "hit_rate": {
                    "type": "number"
                },
                "hits": {
                    "type": "integer"
                },
                "miss_rate": {
                    "type": "number"
                },
                "misses": {
                    "type": "integer"
                },
                "sets": {
                    "type": "integer"
                },
                "total_operations": {
                    "type": "integer"
                }
            }
        },
        "cache.MetricsReport": {
            "type": "object",
            "properties": {
                "global_metrics": {
                    "$ref": "#/definitions/cache.Metrics"
                },
                "prefix_metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/cache.Metrics"
                    }
                },
                "timestamp": {
                    "type": "string"
                },
                "top_prefixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.PrefixMetricSummary"
                    }
                }
            }
        },
        "cache.MultiLevelCacheMetrics": {
            "type": "object",
            "properties": {
                "demotions": {
                    "type": "integer"
                },
                "l1_hit_rate": {
                    "type": "number"
                },
                "l1_hits": {
                    "description": "Multi-level specific metrics",
                    "type": "integer"
                },
                "l1_metrics": {
                    "$ref": "#/definitions/cache.MemoryCacheMetrics"
                },
                "l2_hit_rate": {
                    "type": "number"
                },
                "l2_hits": {
                    "type": "integer"
                },
                "l2_metrics": {
                    "$ref": "#/definitions/cache.Metrics"
                },
                "overall_hit_rate": {
                    "description": "Computed metrics",
                    "type": "number"
                },
                "promotions": {
                    "type": "integer"
                },
                "total_misses": {
                    "type": "integer"
                },
                "write_behinds": {
                    "type": "integer"
                }
            }
        },
        "cache.PerformanceMetrics": {
            "type": "object",
            "properties": {
                "cache_consistency": {
                    "description": "L1-L2 consistency score",
                    "type": "number"
                },
                "data_freshness": {
                    "description": "Quality metrics",
                    "type": "number"
                },
                "hourly_evictions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "hourly_hit_rates": {
                    "description": "Trend data (last 24h)",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "hourly_miss_rates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "l1_avg_response_time": {
                    "description": "Response time metrics (in milliseconds)",
                    "type": "number"
                },
                "l1_cost_per_hit": {
                    "description": "Cost metrics",
                    "type": "number"
                },
                "l2_avg_response_time": {
                    "type": "number"
                },
                "l2_cost_per_hit": {
                    "type": "number"
                },
                "memory_efficiency": {
                    "description": "Cache efficiency",
                    "type": "number"
                },
                "promotion_accuracy": {
                    "description": "Accuracy of promotion decisions",
                    "type": "number"
                },
                "start_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-01-01T00:00:00Z"
                },
                "storage_efficiency": {
                    "description": "Useful data / Total storage * 100",
                    "type": "number"
                }
            }
        },
        "cache.PrefixMetricSummary": {
            "type": "object",
            "properties": {
                "error_rate": {
                    "type": "number"
                },
                "hit_rate": {
                    "type": "number"
                },
                "prefix": {
                    "type": "string"
                },
                "total_operations": {
                    "type": "integer"
                }
            }
        },
        "cache.WarmingMetrics": {
            "type": "object",
            "properties": {
                "error_count": {
                    "type": "integer"
                },
                "items_per_second": {
                    "type": "number"
                },
                "last_warm_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-01-01T00:00:00Z"
                },
                "success_count": {
                    "type": "integer"
                },
                "total_warmed": {
                    "type": "integer"
                },
                "warming_duration": {
                    "type": "string",
                    "example": "1h30m"
                }
            }
        },
        "dto.AdminCreateTicketRequest": {
            "type": "object",
            "required": [
                "category",
                "description",
                "title",
                "user_id"
            ],
            "properties": {
                "assigned_to_id": {
                    "type": "integer",
                    "example": 456
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "general",
                        "technical",
                        "billing",
                        "account",
                        "feature",
                        "bug",
                        "subscription",
                        "payment"
                    ],
                    "example": "technical"
                },
                "description": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 10,
                    "example": "Customer reports unable to log in to their account"
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"source\": \"admin_created\"}"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "normal",
                        "high",
                        "urgent",
                        "critical"
                    ],
                    "example": "normal"
                },
                "tags": {
                    "type": "string",
                    "example": "urgent,login"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 5,
                    "example": "Unable to access account"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "dto.AdminTicketMessageRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "attachments": {
                    "type": "string",
                    "example": "[{\"name\":\"response.pdf\",\"url\":\"https://example.com/file.pdf\"}]"
                },
                "content": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 1,
                    "example": "Thank you for contacting support. We are reviewing your issue."
                },
                "is_internal": {
                    "type": "boolean",
                    "example": false
                },
                "message_type": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "system"
                    ],
                    "example": "admin"
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"agent_id\":\"456\"}"
                }
            }
        },
        "dto.AdminUpdateTicketRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "enum": [
                        "general",
                        "technical",
                        "billing",
                        "account",
                        "feature",
                        "bug",
                        "subscription",
                        "payment"
                    ],
                    "example": "billing"
                },
                "description": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 10,
                    "example": "Updated description"
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"updated_by\": \"admin\"}"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "normal",
                        "high",
                        "urgent",
                        "critical"
                    ],
                    "example": "high"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "open",
                        "in_progress",
                        "pending",
                        "resolved",
                        "closed"
                    ],
                    "example": "in_progress"
                },
                "tags": {
                    "type": "string",
                    "example": "urgent,billing"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 5,
                    "example": "Updated ticket title"
                }
            }
        },
        "dto.ApplicationHealthResponse": {
            "type": "object",
            "properties": {
                "modules": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "dto.ApproveReferralRequest": {
            "type": "object",
            "properties": {
                "note": {
                    "type": "string",
                    "example": "Approved by admin"
                },
                "reward_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                }
            }
        },
        "dto.AssignTicketRequest": {
            "type": "object",
            "required": [
                "assigned_to_id"
            ],
            "properties": {
                "assigned_to_id": {
                    "type": "integer",
                    "example": 456
                },
                "note": {
                    "type": "string",
                    "example": "Assigned to senior support agent"
                }
            }
        },
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/dto.TokenResponse"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "dto.AuthorizeURLResponse": {
            "type": "object",
            "properties": {
                "auth_url": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "dto.BenchmarkResult": {
            "type": "object",
            "properties": {
                "avg_latency_ms": {
                    "type": "number",
                    "example": 1.2
                },
                "failure_count": {
                    "type": "integer",
                    "example": 50
                },
                "operation_type": {
                    "type": "string",
                    "example": "get"
                },
                "success_count": {
                    "type": "integer",
                    "example": 4950
                },
                "throughput_ops": {
                    "type": "number",
                    "example": 500
                },
                "total_operations": {
                    "type": "integer",
                    "example": 5000
                }
            }
        },
        "dto.BulkCreateCouponRequest": {
            "type": "object",
            "required": [
                "code_prefix",
                "count",
                "name",
                "type",
                "value"
            ],
            "properties": {
                "applicable_plans": {
                    "type": "string",
                    "example": "[1,2,3]"
                },
                "code_prefix": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "example": "BULK"
                },
                "count": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1,
                    "example": 100
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Bulk generated discount coupons"
                },
                "is_public": {
                    "type": "boolean",
                    "example": true
                },
                "max_uses": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "max_uses_per_user": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "min_order_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Bulk Generated Coupons"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "fixed_amount"
                    ],
                    "example": "percentage"
                },
                "valid_from": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "valid_until": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "value": {
                    "type": "number",
                    "minimum": 0,
                    "example": 20
                }
            }
        },
        "dto.BulkReferralRequest": {
            "type": "object",
            "required": [
                "action",
                "ids"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "approve",
                        "reject",
                        "payout"
                    ]
                },
                "amount": {
                    "type": "number",
                    "minimum": 0
                },
                "ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "note": {
                    "type": "string"
                }
            }
        },
        "dto.BulkTicketActionRequest": {
            "type": "object",
            "required": [
                "action",
                "ticket_ids"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "assign",
                        "close",
                        "reopen",
                        "update_priority",
                        "update_status"
                    ],
                    "example": "assign"
                },
                "assigned_to_id": {
                    "type": "integer",
                    "example": 456
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "normal",
                        "high",
                        "urgent",
                        "critical"
                    ],
                    "example": "high"
                },
                "reason": {
                    "type": "string",
                    "example": "Bulk closing resolved tickets"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "open",
                        "in_progress",
                        "pending",
                        "resolved",
                        "closed"
                    ],
                    "example": "closed"
                },
                "ticket_ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.CacheBenchmarkResponse": {
            "type": "object",
            "properties": {
                "avg_latency_ms": {
                    "type": "number",
                    "example": 1
                },
                "duration_ms": {
                    "type": "integer",
                    "example": 10000
                },
                "max_latency_ms": {
                    "type": "number",
                    "example": 10
                },
                "min_latency_ms": {
                    "type": "number",
                    "example": 0.1
                },
                "operations_per_sec": {
                    "type": "number",
                    "example": 1000
                },
                "results": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.BenchmarkResult"
                    }
                },
                "total_operations": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "dto.CacheDashboardResponse": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "health": {
                    "$ref": "#/definitions/dto.CacheHealthResponse"
                },
                "invalidation": {
                    "$ref": "#/definitions/dto.CacheInvalidationResponse"
                },
                "metrics": {
                    "$ref": "#/definitions/dto.CacheMetricsResponse"
                },
                "performance": {
                    "$ref": "#/definitions/dto.CachePerformanceResponse"
                },
                "warming": {
                    "$ref": "#/definitions/dto.CacheWarmingResponse"
                }
            }
        },
        "dto.CacheHealthResponse": {
            "type": "object",
            "properties": {
                "last_checked": {
                    "type": "integer",
                    "example": 1704067200
                },
                "memory_cache": {
                    "type": "string",
                    "example": "healthy"
                },
                "overall": {
                    "type": "string",
                    "example": "healthy"
                },
                "redis_cache": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "dto.CacheInvalidationResponse": {
            "type": "object",
            "properties": {
                "invalidation_rate": {
                    "type": "number",
                    "example": 0.05
                },
                "last_invalidation": {
                    "type": "integer",
                    "example": 1704067200
                },
                "pending_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recently_invalidated": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.CacheMetricsResponse": {
            "type": "object",
            "properties": {
                "avg_latency_ms": {
                    "type": "number",
                    "example": 2.5
                },
                "hit_rate": {
                    "type": "number",
                    "example": 0.85
                },
                "miss_rate": {
                    "type": "number",
                    "example": 0.15
                },
                "total_hits": {
                    "type": "integer",
                    "example": 1000
                },
                "total_misses": {
                    "type": "integer",
                    "example": 150
                },
                "total_requests": {
                    "type": "integer",
                    "example": 1150
                }
            }
        },
        "dto.CachePerformanceResponse": {
            "type": "object",
            "properties": {
                "avg_response_time_ms": {
                    "type": "number",
                    "example": 1.2
                },
                "eviction_count": {
                    "type": "integer",
                    "example": 10
                },
                "key_count": {
                    "type": "integer",
                    "example": 500
                },
                "memory_usage_bytes": {
                    "type": "integer",
                    "example": 1048576
                },
                "throughput_qps": {
                    "type": "number",
                    "example": 100.5
                }
            }
        },
        "dto.CacheWarmingResponse": {
            "type": "object",
            "properties": {
                "duration_ms": {
                    "type": "integer",
                    "example": 5000
                },
                "in_progress": {
                    "type": "boolean",
                    "example": false
                },
                "last_warmed": {
                    "type": "integer",
                    "example": 1704067200
                },
                "success_rate": {
                    "type": "number",
                    "example": 0.95
                },
                "warming_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.CloseTicketRequest": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "example": "Issue resolved, closing ticket"
                }
            }
        },
        "dto.CouponResponse": {
            "type": "object",
            "properties": {
                "applicable_plans": {
                    "description": "Applicable plans",
                    "type": "string"
                },
                "code": {
                    "description": "Coupon code",
                    "type": "string",
                    "example": "SAVE20"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "description": "Currency",
                    "type": "string",
                    "example": "CNY"
                },
                "description": {
                    "description": "Description",
                    "type": "string",
                    "example": "Save 20% on any plan"
                },
                "id": {
                    "description": "Coupon ID",
                    "type": "integer",
                    "example": 1
                },
                "is_public": {
                    "description": "Public visibility",
                    "type": "boolean",
                    "example": true
                },
                "max_uses": {
                    "description": "Maximum uses",
                    "type": "integer",
                    "example": 100
                },
                "max_uses_per_user": {
                    "description": "Max uses per user",
                    "type": "integer",
                    "example": 1
                },
                "min_order_amount": {
                    "description": "Minimum order amount",
                    "type": "number",
                    "example": 10
                },
                "name": {
                    "description": "Coupon name",
                    "type": "string",
                    "example": "20% Off"
                },
                "status": {
                    "description": "Status",
                    "type": "string",
                    "example": "active"
                },
                "type": {
                    "description": "Discount type",
                    "type": "string",
                    "example": "percentage"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "used_count": {
                    "description": "Used count",
                    "type": "integer",
                    "example": 15
                },
                "valid_from": {
                    "description": "Valid from",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "valid_until": {
                    "description": "Valid until",
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "value": {
                    "description": "Discount value",
                    "type": "number",
                    "example": 20
                }
            }
        },
        "dto.CreateCouponRequest": {
            "type": "object",
            "required": [
                "code",
                "name",
                "type",
                "value"
            ],
            "properties": {
                "applicable_plans": {
                    "type": "string",
                    "example": "[1,2,3]"
                },
                "code": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "SAVE20"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Save 20% on any subscription plan"
                },
                "is_public": {
                    "type": "boolean",
                    "example": true
                },
                "max_uses": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 100
                },
                "max_uses_per_user": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "min_order_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "20% Off All Plans"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "fixed_amount"
                    ],
                    "example": "percentage"
                },
                "valid_from": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "valid_until": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "value": {
                    "type": "number",
                    "minimum": 0,
                    "example": 20
                }
            }
        },
        "dto.CreateInvoiceFromOrderRequest": {
            "type": "object",
            "properties": {
                "auto_send": {
                    "description": "Auto-send flag",
                    "type": "boolean",
                    "example": false
                },
                "due_date": {
                    "description": "Due date (optional)",
                    "type": "string",
                    "example": "2024-01-31"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "notes": {
                    "description": "Additional notes (optional)",
                    "type": "string",
                    "example": "Thank you for your subscription"
                },
                "template": {
                    "description": "Template and language options",
                    "type": "string",
                    "example": "default"
                }
            }
        },
        "dto.CreateOrderRequest": {
            "type": "object",
            "required": [
                "order_type",
                "payment_gateway",
                "payment_method",
                "subscription_plan_id",
                "user_id"
            ],
            "properties": {
                "coupon_code": {
                    "type": "string",
                    "example": "SAVE20"
                },
                "metadata": {
                    "type": "string"
                },
                "order_type": {
                    "type": "string",
                    "enum": [
                        "new",
                        "renewal",
                        "upgrade",
                        "downgrade"
                    ],
                    "example": "new"
                },
                "payment_gateway": {
                    "type": "string",
                    "example": "epay"
                },
                "payment_method": {
                    "type": "string",
                    "example": "alipay"
                },
                "payment_method_id": {
                    "description": "Optional: Use saved payment method",
                    "type": "integer",
                    "example": 1
                },
                "return_url": {
                    "type": "string",
                    "example": "https://example.com/payment/return"
                },
                "subscription_plan_id": {
                    "type": "integer",
                    "example": 1
                },
                "use_default_payment": {
                    "description": "Use user's default payment method",
                    "type": "boolean",
                    "example": false
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.CreatePaymentConfigRequest": {
            "type": "object",
            "required": [
                "key",
                "method",
                "name",
                "pid",
                "url"
            ],
            "properties": {
                "fixed_fee": {
                    "type": "number",
                    "example": 0
                },
                "is_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "key": {
                    "type": "string",
                    "example": "secret123"
                },
                "max_amount": {
                    "type": "number",
                    "example": 99999.99
                },
                "method": {
                    "type": "string",
                    "example": "epay"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Method"
                    }
                },
                "min_amount": {
                    "type": "number",
                    "example": 0.01
                },
                "name": {
                    "type": "string",
                    "example": "EPay Payment Method"
                },
                "notify_url": {
                    "type": "string",
                    "example": "https://example.com/webhook"
                },
                "percentage_fee": {
                    "type": "number",
                    "example": 0.6
                },
                "pid": {
                    "type": "string",
                    "example": "partner123"
                },
                "return_url": {
                    "type": "string",
                    "example": "https://example.com/return"
                },
                "sort_order": {
                    "type": "integer",
                    "example": 1
                },
                "supported_currencies": {
                    "type": "string",
                    "example": "CNY"
                },
                "url": {
                    "type": "string",
                    "example": "https://api.example.com"
                }
            }
        },
        "dto.CreatePaymentMethodRequest": {
            "type": "object",
            "required": [
                "display_name",
                "gateway",
                "method",
                "payment_token",
                "type"
            ],
            "properties": {
                "billing_country": {
                    "type": "string",
                    "example": "CN"
                },
                "billing_postcode": {
                    "type": "string",
                    "example": "100000"
                },
                "brand": {
                    "type": "string",
                    "example": "Alipay"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My Alipay Account"
                },
                "expiry_month": {
                    "type": "integer",
                    "example": 12
                },
                "expiry_year": {
                    "type": "integer",
                    "example": 2025
                },
                "gateway": {
                    "type": "string",
                    "example": "epay"
                },
                "gateway_customer_id": {
                    "type": "string",
                    "example": "cus_1234567890"
                },
                "masked_info": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "ali***@example.com"
                },
                "method": {
                    "type": "string",
                    "example": "alipay"
                },
                "payment_token": {
                    "type": "string",
                    "example": "tok_1234567890"
                },
                "set_as_default": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "card",
                        "bank_account",
                        "digital_wallet"
                    ],
                    "example": "card"
                }
            }
        },
        "dto.CreatePaymentOrderRequest": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "gateway",
                "payment_method",
                "subject"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 29.99
                },
                "body": {
                    "type": "string",
                    "example": "Monthly premium subscription payment"
                },
                "client_ip": {
                    "description": "Client IP",
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "expired_minutes": {
                    "type": "integer",
                    "example": 30
                },
                "gateway": {
                    "type": "string",
                    "example": "epay"
                },
                "invoice_id": {
                    "type": "integer",
                    "example": 1
                },
                "metadata": {
                    "description": "Additional metadata",
                    "type": "string"
                },
                "notify_url": {
                    "description": "Async notification URL",
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "example": "alipay"
                },
                "return_url": {
                    "type": "string",
                    "example": "https://example.com/payment/return"
                },
                "subject": {
                    "type": "string",
                    "example": "Premium Subscription"
                },
                "subscription_order_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateReferralCampaignRequest": {
            "type": "object",
            "required": [
                "name",
                "referrer_reward_amount",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Refer friends and earn rewards"
                },
                "end_date": {
                    "type": "string",
                    "example": "2024-08-31T23:59:59Z"
                },
                "is_public": {
                    "type": "boolean",
                    "example": true
                },
                "max_referrals": {
                    "type": "integer",
                    "example": 10
                },
                "max_rewards": {
                    "type": "integer",
                    "example": 1000
                },
                "min_referrals": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Summer Referral Campaign"
                },
                "referee_reward_amount": {
                    "type": "number",
                    "example": 5
                },
                "referrer_reward_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "reward_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "start_date": {
                    "type": "string",
                    "example": "2024-06-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "terms": {
                    "type": "string",
                    "maxLength": 5000,
                    "example": "Terms and conditions"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "standard",
                        "bonus",
                        "limited"
                    ],
                    "example": "standard"
                }
            }
        },
        "dto.CreateReferralRequest": {
            "type": "object",
            "required": [
                "referee_id",
                "referral_source",
                "referrer_id"
            ],
            "properties": {
                "attribution_data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "campaign_id": {
                    "type": "integer",
                    "example": 1
                },
                "conversion_type": {
                    "type": "string",
                    "example": "subscription"
                },
                "conversion_value": {
                    "type": "number",
                    "example": 29.99
                },
                "expiration_days": {
                    "type": "integer",
                    "example": 30
                },
                "invite_code_id": {
                    "type": "integer",
                    "example": 1
                },
                "referee_id": {
                    "type": "integer",
                    "example": 2
                },
                "referral_channel": {
                    "type": "string",
                    "example": "organic"
                },
                "referral_code": {
                    "type": "string",
                    "example": "REF123"
                },
                "referral_source": {
                    "type": "string",
                    "example": "invite_code"
                },
                "referrer_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.CreateServerGroupRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Asia Pacific"
                }
            }
        },
        "dto.CreateShadowsocksServerRequest": {
            "type": "object",
            "required": [
                "cipher",
                "group_id",
                "host",
                "name",
                "port",
                "rate",
                "server_port"
            ],
            "properties": {
                "cipher": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "aes-256-gcm"
                },
                "excludes": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "192.168.0.0/16"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "host": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "us01.example.com"
                },
                "ips": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "0.0.0.0/0"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "US-01"
                },
                "obfs": {
                    "type": "string",
                    "maxLength": 11,
                    "example": "tls"
                },
                "obfs_settings": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "obfs=tls"
                },
                "parent_id": {
                    "type": "integer",
                    "example": 1
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1,
                    "example": 443
                },
                "rate": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1
                },
                "route_id": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "route-1"
                },
                "server_port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1,
                    "example": 8388
                },
                "show": {
                    "type": "integer",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 1
                },
                "sort": {
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "premium,fast"
                }
            }
        },
        "dto.DatabaseHealthResponse": {
            "type": "object",
            "properties": {
                "mysql": {
                    "type": "boolean",
                    "example": true
                },
                "redis": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dto.EscalateTicketRequest": {
            "type": "object",
            "required": [
                "escalated_to_id",
                "escalation_reason"
            ],
            "properties": {
                "escalated_to_id": {
                    "type": "integer",
                    "example": 789
                },
                "escalation_reason": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 10,
                    "example": "Customer demands supervisor escalation"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "high",
                        "urgent",
                        "critical"
                    ],
                    "example": "urgent"
                }
            }
        },
        "dto.ExtendExpiryRequest": {
            "type": "object",
            "required": [
                "extend_type"
            ],
            "properties": {
                "extend_days": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 30
                },
                "extend_type": {
                    "type": "string",
                    "enum": [
                        "days",
                        "specific"
                    ],
                    "example": "days"
                },
                "new_expiry": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                }
            }
        },
        "dto.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/dto.ApplicationHealthResponse"
                },
                "database": {
                    "$ref": "#/definitions/dto.DatabaseHealthResponse"
                }
            }
        },
        "dto.InviteCodeResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "a1b2c3d4e5f6789012345678901234567890abcd"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "created_by_id": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Friend invitation code"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "max_uses": {
                    "type": "integer",
                    "example": 10
                },
                "referral_campaign_id": {
                    "description": "Referral Integration Fields",
                    "type": "integer",
                    "example": 1
                },
                "referral_reward_amount": {
                    "type": "number",
                    "example": 5
                },
                "referral_reward_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "used",
                        "disabled"
                    ],
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "used_count": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dto.InvoiceResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 29.99
                },
                "billing_address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "billing_city": {
                    "type": "string",
                    "example": "New York"
                },
                "billing_country": {
                    "type": "string",
                    "example": "US"
                },
                "billing_email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "billing_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "billing_state": {
                    "type": "string",
                    "example": "NY"
                },
                "billing_zip": {
                    "type": "string",
                    "example": "10001"
                },
                "company_address": {
                    "type": "string",
                    "example": "456 Business Ave"
                },
                "company_name": {
                    "type": "string",
                    "example": "Acme Corp"
                },
                "company_tax_id": {
                    "type": "string",
                    "example": "12-3456789"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "days_overdue": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "example": "Monthly subscription"
                },
                "display_name": {
                    "type": "string"
                },
                "due_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-31T23:59:59Z"
                },
                "full_address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "invoice_number": {
                    "type": "string",
                    "example": "INV-2024-001"
                },
                "invoice_type": {
                    "type": "string",
                    "example": "standard"
                },
                "is_overdue": {
                    "description": "Computed fields",
                    "type": "boolean"
                },
                "issued_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "notes": {
                    "type": "string",
                    "example": "Thank you for your business"
                },
                "paid_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-15T10:30:00Z"
                },
                "payment_method": {
                    "type": "string",
                    "example": "credit_card"
                },
                "payment_reference": {
                    "type": "string",
                    "example": "txn_123456"
                },
                "pdf_path": {
                    "type": "string",
                    "example": "/invoices/INV-2024-001.pdf"
                },
                "pdf_size": {
                    "type": "integer",
                    "example": 12345
                },
                "sent_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T12:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "sent"
                },
                "subscription_order": {
                    "$ref": "#/definitions/dto.SubscriptionOrderBasicDTO"
                },
                "subscription_order_id": {
                    "type": "integer",
                    "example": 1
                },
                "tax_amount": {
                    "type": "number",
                    "example": 5.99
                },
                "tax_number": {
                    "type": "string",
                    "example": "GB123456789"
                },
                "tax_rate": {
                    "type": "number",
                    "example": 0.2
                },
                "tax_type": {
                    "type": "string",
                    "example": "VAT"
                },
                "template": {
                    "type": "string",
                    "example": "default"
                },
                "total_amount": {
                    "type": "number",
                    "example": 35.98
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user": {
                    "description": "Related data (to be populated at application layer)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserBasicDTO"
                        }
                    ]
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                },
                "voided_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "dto.PatchServerGroupRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Europe"
                }
            }
        },
        "dto.PatchShadowsocksServerRequest": {
            "type": "object",
            "properties": {
                "cipher": {
                    "type": "string",
                    "example": "aes-256-gcm"
                },
                "excludes": {
                    "type": "string",
                    "example": "192.168.0.0/16"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "host": {
                    "type": "string",
                    "example": "us01.example.com"
                },
                "ips": {
                    "type": "string",
                    "example": "0.0.0.0/0"
                },
                "name": {
                    "type": "string",
                    "example": "US-01"
                },
                "obfs": {
                    "type": "string",
                    "example": "tls"
                },
                "obfs_settings": {
                    "type": "string",
                    "example": "obfs=tls"
                },
                "parent_id": {
                    "type": "integer",
                    "example": 1
                },
                "port": {
                    "type": "integer",
                    "example": 443
                },
                "rate": {
                    "type": "number",
                    "example": 1
                },
                "route_id": {
                    "type": "string",
                    "example": "route-1"
                },
                "server_port": {
                    "type": "integer",
                    "example": 8388
                },
                "show": {
                    "type": "integer",
                    "example": 1
                },
                "sort": {
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "type": "string",
                    "example": "premium,fast"
                }
            }
        },
        "dto.PayOrderRequest": {
            "type": "object",
            "required": [
                "order_id",
                "payment_gateway",
                "payment_method"
            ],
            "properties": {
                "client_ip": {
                    "type": "string",
                    "example": "192.168.1.1"
                },
                "metadata": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer",
                    "example": 1
                },
                "payment_gateway": {
                    "type": "string",
                    "example": "epay"
                },
                "payment_method": {
                    "type": "string",
                    "example": "alipay"
                },
                "payment_method_id": {
                    "description": "Optional: Use saved payment method",
                    "type": "integer",
                    "example": 1
                },
                "return_url": {
                    "type": "string",
                    "example": "https://example.com/payment/return"
                },
                "use_default_payment": {
                    "description": "Use user's default payment method",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "dto.PaymentConfigResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "fixed_fee": {
                    "description": "Fixed fee",
                    "type": "number",
                    "example": 0
                },
                "id": {
                    "description": "Config ID",
                    "type": "integer",
                    "example": 1
                },
                "is_enabled": {
                    "description": "Enabled status",
                    "type": "boolean",
                    "example": true
                },
                "key": {
                    "description": "API key/secret",
                    "type": "string",
                    "example": "secret123"
                },
                "max_amount": {
                    "description": "Maximum amount",
                    "type": "number",
                    "example": 99999.99
                },
                "method": {
                    "description": "Payment method identifier",
                    "type": "string",
                    "example": "epay"
                },
                "methods": {
                    "description": "Payment methods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Method"
                    }
                },
                "min_amount": {
                    "description": "Minimum amount",
                    "type": "number",
                    "example": 0.01
                },
                "name": {
                    "description": "Display name",
                    "type": "string",
                    "example": "EPay Payment Method"
                },
                "notify_url": {
                    "description": "Callback URL",
                    "type": "string",
                    "example": "https://example.com/webhook"
                },
                "percentage_fee": {
                    "description": "Percentage fee",
                    "type": "number",
                    "example": 0.6
                },
                "pid": {
                    "description": "Partner/Merchant ID",
                    "type": "string",
                    "example": "partner123"
                },
                "return_url": {
                    "description": "Return URL",
                    "type": "string",
                    "example": "https://example.com/return"
                },
                "sort_order": {
                    "description": "Sort order",
                    "type": "integer",
                    "example": 1
                },
                "supported_currencies": {
                    "description": "Supported currencies",
                    "type": "string",
                    "example": "CNY"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "url": {
                    "description": "API endpoint URL",
                    "type": "string",
                    "example": "https://api.example.com"
                }
            }
        },
        "dto.PaymentRecordResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Payment amount",
                    "type": "number",
                    "example": 29.99
                },
                "can_refund": {
                    "description": "Refundable status",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "description": "Currency",
                    "type": "string",
                    "example": "CNY"
                },
                "exchange_rate": {
                    "description": "Exchange rate",
                    "type": "number",
                    "example": 1
                },
                "expired_at": {
                    "description": "Expiration time",
                    "type": "string",
                    "example": "2024-01-01T01:00:00Z"
                },
                "gateway": {
                    "description": "Payment gateway",
                    "type": "string",
                    "example": "epay"
                },
                "id": {
                    "description": "Payment ID",
                    "type": "integer",
                    "example": 1
                },
                "is_expired": {
                    "description": "Computed fields",
                    "type": "boolean"
                },
                "notified_at": {
                    "description": "Notification time",
                    "type": "string",
                    "example": "2024-01-01T00:31:00Z"
                },
                "out_trade_no": {
                    "description": "Merchant order number",
                    "type": "string",
                    "example": "ORDER202401010001"
                },
                "paid_at": {
                    "description": "Payment completion time",
                    "type": "string",
                    "example": "2024-01-01T00:30:00Z"
                },
                "payment_method": {
                    "description": "Payment method",
                    "type": "string",
                    "example": "alipay"
                },
                "payment_no": {
                    "description": "Payment number",
                    "type": "string",
                    "example": "PAY202401010001"
                },
                "payment_status": {
                    "description": "Gateway payment status",
                    "type": "string",
                    "example": "success"
                },
                "payment_url": {
                    "description": "Payment URL",
                    "type": "string",
                    "example": "https://example.com/pay"
                },
                "qr_code_url": {
                    "description": "QR code URL",
                    "type": "string",
                    "example": "https://example.com/qr"
                },
                "refund_amount": {
                    "description": "Refund amount",
                    "type": "number",
                    "example": 0
                },
                "refund_reason": {
                    "description": "Refund reason",
                    "type": "string",
                    "example": "User request"
                },
                "refund_status": {
                    "description": "Refund status",
                    "type": "string",
                    "example": "none"
                },
                "refundable_amount": {
                    "description": "Refundable amount",
                    "type": "number"
                },
                "refunded_at": {
                    "description": "Refund time",
                    "type": "string",
                    "example": "2024-01-02T10:00:00Z"
                },
                "remark": {
                    "description": "Remark",
                    "type": "string",
                    "example": "Subscription payment"
                },
                "status": {
                    "description": "Payment status",
                    "type": "string",
                    "example": "completed"
                },
                "subscription_order": {
                    "description": "Subscription order info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SubscriptionOrderBasicDTO"
                        }
                    ]
                },
                "subscription_order_id": {
                    "description": "Subscription order ID",
                    "type": "integer",
                    "example": 1
                },
                "transaction_id": {
                    "description": "Transaction ID",
                    "type": "string",
                    "example": "TXN123456789"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "example": "2024-01-01T00:30:00Z"
                },
                "user": {
                    "description": "Related data (to be populated at application layer)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserBasicDTO"
                        }
                    ]
                },
                "user_id": {
                    "description": "User ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.PayoutReferralRequest": {
            "type": "object",
            "required": [
                "amount",
                "payment_info",
                "payment_method"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "note": {
                    "type": "string",
                    "example": "Monthly referral payout"
                },
                "payment_info": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "payment_method": {
                    "type": "string",
                    "example": "paypal"
                }
            }
        },
        "dto.ReferralCampaignResponse": {
            "type": "object",
            "properties": {
                "campaign_type": {
                    "type": "string",
                    "example": "seasonal"
                },
                "code": {
                    "type": "string",
                    "example": "SUMMER2024"
                },
                "conversion_rate": {
                    "type": "number",
                    "example": 0.3659
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "created_by": {
                    "description": "Optional related data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserBasicDTO"
                        }
                    ]
                },
                "created_by_id": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Summer referral campaign with bonus rewards"
                },
                "end_date": {
                    "type": "string",
                    "example": "2024-08-31T23:59:59Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_public": {
                    "type": "boolean",
                    "example": true
                },
                "max_referrals": {
                    "type": "integer",
                    "example": 50
                },
                "max_rewards": {
                    "type": "integer",
                    "example": 50
                },
                "minimum_purchase_amount": {
                    "type": "number",
                    "example": 25
                },
                "name": {
                    "type": "string",
                    "example": "Summer Referral Campaign"
                },
                "referee_reward_amount": {
                    "type": "number",
                    "example": 20
                },
                "referee_reward_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "referee_reward_type": {
                    "type": "string",
                    "example": "discount"
                },
                "referrals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ReferralResponse"
                    }
                },
                "referrer_reward_amount": {
                    "type": "number",
                    "example": 10
                },
                "referrer_reward_cap": {
                    "type": "number",
                    "example": 100
                },
                "referrer_reward_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "referrer_reward_type": {
                    "type": "string",
                    "example": "fixed"
                },
                "requires_approval": {
                    "type": "boolean",
                    "example": false
                },
                "reward_delay": {
                    "type": "integer",
                    "example": 7
                },
                "reward_trigger": {
                    "type": "string",
                    "example": "first_purchase"
                },
                "start_date": {
                    "type": "string",
                    "example": "2024-06-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "total_conversions": {
                    "type": "integer",
                    "example": 45
                },
                "total_referrals": {
                    "type": "integer",
                    "example": 123
                },
                "total_reward_budget": {
                    "type": "number",
                    "example": 5000
                },
                "total_rewards_paid": {
                    "type": "number",
                    "example": 450
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "dto.ReferralEventResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "event_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "event_data": {
                    "type": "string",
                    "example": "{\"signup_method\":\"email\"}"
                },
                "event_description": {
                    "type": "string",
                    "example": "User completed registration"
                },
                "event_type": {
                    "type": "string",
                    "example": "registration"
                },
                "event_value": {
                    "type": "number",
                    "example": 29.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "ip_address": {
                    "type": "string",
                    "example": "192.168.1.100"
                },
                "page_url": {
                    "type": "string",
                    "example": "https://example.com/signup"
                },
                "processed_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "referral": {
                    "description": "Optional related data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    ]
                },
                "referral_id": {
                    "type": "integer",
                    "example": 1
                },
                "referrer_url": {
                    "type": "string",
                    "example": "https://example.com/ref"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "user_agent": {
                    "type": "string",
                    "example": "Mozilla/5.0..."
                },
                "user_id": {
                    "type": "integer",
                    "example": 2
                },
                "utm_campaign": {
                    "type": "string",
                    "example": "summer_referral"
                },
                "utm_content": {
                    "type": "string",
                    "example": "banner"
                },
                "utm_medium": {
                    "type": "string",
                    "example": "social"
                },
                "utm_source": {
                    "type": "string",
                    "example": "facebook"
                },
                "utm_term": {
                    "type": "string",
                    "example": "referral"
                }
            }
        },
        "dto.ReferralResponse": {
            "type": "object",
            "properties": {
                "campaign": {
                    "$ref": "#/definitions/dto.ReferralCampaignResponse"
                },
                "campaign_id": {
                    "type": "integer",
                    "example": 1
                },
                "click_count": {
                    "type": "integer",
                    "example": 3
                },
                "conversion_type": {
                    "type": "string",
                    "example": "subscription"
                },
                "conversion_value": {
                    "type": "number",
                    "example": 29.99
                },
                "converted_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "first_click_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "invite_code": {
                    "$ref": "#/definitions/dto.InviteCodeResponse"
                },
                "invite_code_id": {
                    "type": "integer",
                    "example": 1
                },
                "last_click_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "referee": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "referee_id": {
                    "type": "integer",
                    "example": 2
                },
                "referee_reward": {
                    "type": "number",
                    "example": 2.5
                },
                "referee_status": {
                    "type": "string",
                    "example": "activated"
                },
                "referral_channel": {
                    "type": "string",
                    "example": "organic"
                },
                "referral_code": {
                    "type": "string",
                    "example": "REF123"
                },
                "referral_events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ReferralEventResponse"
                    }
                },
                "referral_rewards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ReferralRewardResponse"
                    }
                },
                "referral_source": {
                    "type": "string",
                    "example": "invite_code"
                },
                "referrer": {
                    "description": "Optional related data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserBasicDTO"
                        }
                    ]
                },
                "referrer_id": {
                    "type": "integer",
                    "example": 1
                },
                "reward_amount": {
                    "type": "number",
                    "example": 5
                },
                "reward_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "reward_status": {
                    "type": "string",
                    "example": "earned"
                },
                "rewarded_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "confirmed"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "dto.ReferralRewardResponse": {
            "type": "object",
            "properties": {
                "approved_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "approved_by": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "approved_by_id": {
                    "type": "integer",
                    "example": 1
                },
                "campaign": {
                    "$ref": "#/definitions/dto.ReferralCampaignResponse"
                },
                "campaign_id": {
                    "type": "integer",
                    "example": 1
                },
                "conversion_id": {
                    "type": "integer",
                    "example": 5
                },
                "conversion_type": {
                    "type": "string",
                    "example": "subscription"
                },
                "conversion_value": {
                    "type": "number",
                    "example": 29.99
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "earned_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "net_amount": {
                    "type": "number",
                    "example": 9.5
                },
                "paid_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "payment_method": {
                    "type": "string",
                    "example": "paypal"
                },
                "payment_reference": {
                    "type": "string",
                    "example": "PAY-123456789"
                },
                "payout_batch_id": {
                    "type": "integer",
                    "example": 1
                },
                "payout_fee": {
                    "type": "number",
                    "example": 0.5
                },
                "referral": {
                    "description": "Optional related data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ReferralResponse"
                        }
                    ]
                },
                "referral_id": {
                    "type": "integer",
                    "example": 1
                },
                "rejected_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "rejected_by": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "rejected_by_id": {
                    "type": "integer",
                    "example": 1
                },
                "rejection_reason": {
                    "type": "string",
                    "example": "Fraudulent activity detected"
                },
                "requires_approval": {
                    "type": "boolean",
                    "example": false
                },
                "reward_amount": {
                    "type": "number",
                    "example": 10
                },
                "reward_currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "reward_description": {
                    "type": "string",
                    "example": "Referral bonus for new subscriber"
                },
                "reward_type": {
                    "type": "string",
                    "example": "cash"
                },
                "status": {
                    "type": "string",
                    "example": "earned"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "user_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "invite_code": {
                    "description": "Optional invite code",
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.RejectReferralRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "note": {
                    "type": "string",
                    "example": "Rejected due to policy violation"
                },
                "reason": {
                    "type": "string",
                    "example": "Invalid referral"
                }
            }
        },
        "dto.ServerAPIHealthResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string",
                    "example": "server-api"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "dto.SubscriptionOrderBasicDTO": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 29.99
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "order_number": {
                    "type": "string",
                    "example": "ORD-2024-001"
                },
                "order_type": {
                    "type": "string",
                    "example": "new"
                },
                "paid_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "payment_gateway": {
                    "type": "string",
                    "example": "stripe"
                },
                "payment_method": {
                    "type": "string",
                    "example": "credit_card"
                },
                "status": {
                    "type": "string",
                    "example": "paid"
                },
                "subscription_plan_id": {
                    "type": "integer",
                    "example": 1
                },
                "total_amount": {
                    "type": "number",
                    "example": 29.99
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.ToggleStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                }
            }
        },
        "dto.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "dto.TrafficStatsResponse": {
            "type": "object",
            "properties": {
                "last_updated": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "period": {
                    "type": "string",
                    "example": "monthly"
                },
                "remaining_bytes": {
                    "type": "integer",
                    "example": 9663676416
                },
                "reset_date": {
                    "type": "string",
                    "example": "2024-02-01"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "subscription_id": {
                    "type": "integer",
                    "example": 1
                },
                "total_bytes": {
                    "type": "integer",
                    "example": 10737418240
                },
                "usage_percent": {
                    "type": "number",
                    "example": 10
                },
                "used_bytes": {
                    "type": "integer",
                    "example": 1073741824
                }
            }
        },
        "dto.UniProxyPushResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Traffic data processed successfully"
                },
                "processed": {
                    "type": "integer",
                    "example": 100
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1704067200
                }
            }
        },
        "dto.UpdateCouponRequest": {
            "type": "object",
            "properties": {
                "applicable_plans": {
                    "type": "string",
                    "example": "[1,2,4]"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Updated description"
                },
                "is_public": {
                    "type": "boolean",
                    "example": false
                },
                "max_uses": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 200
                },
                "max_uses_per_user": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 2
                },
                "min_order_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 15
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Updated Coupon Name"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "expired"
                    ],
                    "example": "active"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "fixed_amount"
                    ],
                    "example": "percentage"
                },
                "valid_from": {
                    "type": "string",
                    "example": "2024-02-01T00:00:00Z"
                },
                "valid_until": {
                    "type": "string",
                    "example": "2024-11-30T23:59:59Z"
                },
                "value": {
                    "type": "number",
                    "minimum": 0,
                    "example": 25
                }
            }
        },
        "dto.UpdatePaymentConfigRequest": {
            "type": "object",
            "properties": {
                "fixed_fee": {
                    "type": "number",
                    "example": 0
                },
                "is_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "key": {
                    "type": "string",
                    "example": "secret123"
                },
                "max_amount": {
                    "type": "number",
                    "example": 99999.99
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Method"
                    }
                },
                "min_amount": {
                    "type": "number",
                    "example": 0.01
                },
                "name": {
                    "type": "string",
                    "example": "EPay Payment Method"
                },
                "notify_url": {
                    "type": "string",
                    "example": "https://example.com/webhook"
                },
                "percentage_fee": {
                    "type": "number",
                    "example": 0.6
                },
                "pid": {
                    "type": "string",
                    "example": "partner123"
                },
                "return_url": {
                    "type": "string",
                    "example": "https://example.com/return"
                },
                "sort_order": {
                    "type": "integer",
                    "example": 1
                },
                "supported_currencies": {
                    "type": "string",
                    "example": "CNY"
                },
                "url": {
                    "type": "string",
                    "example": "https://api.example.com"
                }
            }
        },
        "dto.UpdatePaymentMethodRequest": {
            "type": "object",
            "properties": {
                "billing_country": {
                    "type": "string",
                    "example": "CN"
                },
                "billing_postcode": {
                    "type": "string",
                    "example": "100000"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Updated Payment Method"
                },
                "expiry_month": {
                    "type": "integer",
                    "example": 12
                },
                "expiry_year": {
                    "type": "integer",
                    "example": 2026
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dto.UpdateReferralRequest": {
            "type": "object",
            "properties": {
                "conversion_type": {
                    "type": "string"
                },
                "conversion_value": {
                    "type": "number",
                    "minimum": 0
                },
                "referee_status": {
                    "type": "string",
                    "enum": [
                        "registered",
                        "activated",
                        "subscribed",
                        "churned"
                    ]
                },
                "reward_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "reward_status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "earned",
                        "paid",
                        "cancelled"
                    ]
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "confirmed",
                        "rewarded",
                        "cancelled"
                    ]
                }
            }
        },
        "dto.UpdateServerGroupRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Europe"
                }
            }
        },
        "dto.UpdateShadowsocksServerRequest": {
            "type": "object",
            "properties": {
                "cipher": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "aes-256-gcm"
                },
                "excludes": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "192.168.0.0/16"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "host": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "us01.example.com"
                },
                "ips": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "0.0.0.0/0"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "US-01"
                },
                "obfs": {
                    "type": "string",
                    "maxLength": 11,
                    "example": "tls"
                },
                "obfs_settings": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "obfs=tls"
                },
                "parent_id": {
                    "type": "integer",
                    "example": 1
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1,
                    "example": 443
                },
                "rate": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1
                },
                "route_id": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "route-1"
                },
                "server_port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1,
                    "example": 8388
                },
                "show": {
                    "type": "integer",
                    "maximum": 1,
                    "minimum": 0,
                    "example": 1
                },
                "sort": {
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "premium,fast"
                }
            }
        },
        "dto.UpdateTicketMessageRequest": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "string",
                    "example": "[{\"name\":\"updated.png\",\"url\":\"https://example.com/updated.png\"}]"
                },
                "content": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 1,
                    "example": "Updated message content"
                },
                "is_internal": {
                    "type": "boolean",
                    "example": true
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"updated_by\":\"admin\"}"
                }
            }
        },
        "dto.UserBasicDTO": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "provider": {
                    "type": "string",
                    "example": "google"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "dto.UserCreateTicketRequest": {
            "type": "object",
            "required": [
                "category",
                "description",
                "title"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "enum": [
                        "general",
                        "technical",
                        "billing",
                        "account",
                        "feature",
                        "bug",
                        "subscription",
                        "payment"
                    ],
                    "example": "subscription"
                },
                "description": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 10,
                    "example": "I am unable to access my premium subscription features"
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"browser\": \"Chrome\", \"os\": \"Windows\"}"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "normal",
                        "high",
                        "urgent",
                        "critical"
                    ],
                    "example": "normal"
                },
                "tags": {
                    "type": "string",
                    "example": "urgent,subscription"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 5,
                    "example": "Unable to access my subscription"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "provider": {
                    "type": "string",
                    "example": "local"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "dto.UserTicketMessageRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "attachments": {
                    "type": "string",
                    "example": "[{\"name\":\"screenshot.png\",\"url\":\"https://example.com/file.png\"}]"
                },
                "content": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 1,
                    "example": "Thank you for your response. I tried the suggested solution but the issue persists."
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"client_ip\":\"192.168.1.1\"}"
                }
            }
        },
        "dto.ValidateCouponRequest": {
            "type": "object",
            "required": [
                "code",
                "currency",
                "order_amount",
                "plan_id",
                "user_id"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SAVE20"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "order_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 29.99
                },
                "plan_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.ValidateCouponResponse": {
            "type": "object",
            "properties": {
                "coupon": {
                    "$ref": "#/definitions/dto.CouponResponse"
                },
                "discount_amount": {
                    "type": "number",
                    "example": 5.99
                },
                "final_amount": {
                    "type": "number",
                    "example": 24
                },
                "message": {
                    "type": "string",
                    "example": "Coupon is valid"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "entities.AlertConfigurationResponse": {
            "type": "object",
            "properties": {
                "cooldown_minutes": {
                    "description": "Cooldown in minutes",
                    "type": "integer",
                    "example": 60
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "description": "Description",
                    "type": "string",
                    "example": "Alert when traffic usage reaches 80%"
                },
                "id": {
                    "description": "Configuration ID",
                    "type": "integer",
                    "example": 1
                },
                "is_enabled": {
                    "description": "Whether enabled",
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "description": "Alert name",
                    "type": "string",
                    "example": "Traffic 80% Alert"
                },
                "notification_channels": {
                    "description": "Notification channels",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.NotificationChannel"
                    }
                },
                "priority": {
                    "description": "Priority level",
                    "type": "string",
                    "example": "medium"
                },
                "threshold": {
                    "description": "Threshold value",
                    "type": "number",
                    "example": 80
                },
                "threshold_type": {
                    "description": "Threshold type",
                    "type": "string",
                    "example": "percentage"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "usage_type": {
                    "description": "Usage type to monitor",
                    "type": "string",
                    "example": "traffic"
                },
                "user_subscription_id": {
                    "description": "Subscription ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "entities.BindingListResponse": {
            "type": "object",
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.UserAccountBindingResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "entities.CreateBindingRequest": {
            "type": "object",
            "required": [
                "provider",
                "provider_user_id"
            ],
            "properties": {
                "is_primary": {
                    "type": "boolean",
                    "example": false
                },
                "provider": {
                    "type": "string",
                    "enum": [
                        "google",
                        "github",
                        "telegram"
                    ],
                    "example": "google"
                },
                "provider_avatar": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "https://example.com/avatar.jpg"
                },
                "provider_data": {
                    "type": "string",
                    "example": "{\"extra\": \"data\"}"
                },
                "provider_email": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "user@example.com"
                },
                "provider_name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "User Name"
                },
                "provider_user_id": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "123456789"
                },
                "provider_username": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "username"
                }
            }
        },
        "entities.CreateUserRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 6,
                    "example": "password123"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "banned"
                    ],
                    "example": "active"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "johndoe"
                }
            }
        },
        "entities.Method": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Method code (alipay, wechat, qqpay)",
                    "type": "string"
                },
                "description": {
                    "description": "Description",
                    "type": "string"
                },
                "fee_max": {
                    "description": "Maximum fee",
                    "type": "number"
                },
                "fee_min": {
                    "description": "Minimum fee",
                    "type": "number"
                },
                "fee_type": {
                    "description": "constants.FeeTypeNone, constants.FeeTypeFixed, constants.FeeTypePercentage",
                    "type": "string"
                },
                "fee_value": {
                    "description": "Fee value",
                    "type": "number"
                },
                "icon": {
                    "description": "Icon URL",
                    "type": "string"
                },
                "is_enabled": {
                    "description": "Whether enabled",
                    "type": "boolean"
                },
                "name": {
                    "description": "Display name",
                    "type": "string"
                },
                "sort_order": {
                    "description": "Sort order",
                    "type": "integer"
                }
            }
        },
        "entities.NotificationChannel": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "settings": {
                    "description": "additional settings for the channel",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "target": {
                    "description": "email address, webhook URL, telegram chat ID, etc.",
                    "type": "string"
                },
                "type": {
                    "description": "email, webhook, in_app, sms, telegram",
                    "type": "string"
                }
            }
        },
        "entities.NotificationResult": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T12:00:00Z"
                },
                "success": {
                    "type": "boolean"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "entities.ServerGroupResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Asia Pacific"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "entities.ShadowsocksServerResponse": {
            "type": "object",
            "properties": {
                "cipher": {
                    "type": "string",
                    "example": "aes-256-gcm"
                },
                "created_at": {
                    "type": "integer",
                    "example": 1640995200
                },
                "excludes": {
                    "type": "string",
                    "example": "192.168.0.0/16"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "host": {
                    "type": "string",
                    "example": "us01.example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "ips": {
                    "type": "string",
                    "example": "0.0.0.0/0"
                },
                "name": {
                    "type": "string",
                    "example": "US-01"
                },
                "obfs": {
                    "type": "string",
                    "example": "tls"
                },
                "obfs_settings": {
                    "type": "string",
                    "example": "obfs=tls"
                },
                "parent_id": {
                    "type": "integer",
                    "example": 1
                },
                "port": {
                    "type": "integer",
                    "example": 443
                },
                "rate": {
                    "type": "number",
                    "example": 1
                },
                "route_id": {
                    "type": "string",
                    "example": "route-1"
                },
                "server_group": {
                    "description": "Relationship data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.ServerGroupResponse"
                        }
                    ]
                },
                "server_port": {
                    "type": "integer",
                    "example": 8388
                },
                "show": {
                    "type": "integer",
                    "example": 1
                },
                "sort": {
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "type": "string",
                    "example": "premium,fast"
                },
                "updated_at": {
                    "type": "integer",
                    "example": 1640995200
                }
            }
        },
        "entities.SubscriptionOrderResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount",
                    "type": "number",
                    "example": 29.99
                },
                "billing_period_end": {
                    "description": "Billing end",
                    "type": "string",
                    "example": "2024-02-01T00:00:00Z"
                },
                "billing_period_start": {
                    "description": "Billing start",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "coupon_code": {
                    "description": "Coupon code",
                    "type": "string",
                    "example": "SAVE20"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "description": "Currency",
                    "type": "string",
                    "example": "CNY"
                },
                "discount_amount": {
                    "description": "Discount amount",
                    "type": "number",
                    "example": 0
                },
                "discount_type": {
                    "description": "Discount type",
                    "type": "string",
                    "example": "percentage"
                },
                "discount_value": {
                    "description": "Discount value",
                    "type": "number",
                    "example": 20
                },
                "id": {
                    "description": "Order ID",
                    "type": "integer",
                    "example": 1
                },
                "invoice_number": {
                    "description": "Invoice number",
                    "type": "string",
                    "example": "INV-2024-001"
                },
                "invoice_status": {
                    "description": "Invoice status",
                    "type": "string",
                    "example": "sent"
                },
                "invoiced_at": {
                    "description": "Invoiced time",
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "order_number": {
                    "description": "Order number",
                    "type": "string",
                    "example": "ORD-2024-001"
                },
                "order_type": {
                    "description": "Order type",
                    "type": "string",
                    "example": "new"
                },
                "paid_at": {
                    "description": "Paid time",
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "payment_gateway": {
                    "description": "Payment gateway",
                    "type": "string",
                    "example": "stripe"
                },
                "payment_method": {
                    "description": "Payment method",
                    "type": "string",
                    "example": "credit_card"
                },
                "payment_status": {
                    "description": "Payment status",
                    "type": "string",
                    "example": "completed"
                },
                "refund_amount": {
                    "description": "Refund amount",
                    "type": "number",
                    "example": 0
                },
                "refund_reason": {
                    "description": "Refund reason",
                    "type": "string",
                    "example": "User request"
                },
                "refunded_at": {
                    "description": "Refunded time",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "setup_fee": {
                    "description": "Setup fee",
                    "type": "number",
                    "example": 0
                },
                "status": {
                    "description": "Status",
                    "type": "string",
                    "example": "paid"
                },
                "subscription_plan": {
                    "description": "Plan info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    ]
                },
                "subscription_plan_id": {
                    "description": "Plan ID",
                    "type": "integer",
                    "example": 1
                },
                "total_amount": {
                    "description": "Total amount",
                    "type": "number",
                    "example": 29.99
                },
                "transaction_id": {
                    "description": "Transaction ID",
                    "type": "string",
                    "example": "txn_123456"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user": {
                    "description": "Related data (to be populated at application layer)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserBasicDTO"
                        }
                    ]
                },
                "user_id": {
                    "description": "User ID",
                    "type": "integer",
                    "example": 1
                },
                "user_subscription": {
                    "description": "Subscription info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.UserSubscriptionResponse"
                        }
                    ]
                },
                "user_subscription_id": {
                    "description": "Subscription ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "entities.SubscriptionPlanResponse": {
            "type": "object",
            "properties": {
                "billing_cycle": {
                    "description": "Billing cycle",
                    "type": "string",
                    "example": "monthly"
                },
                "billing_interval": {
                    "description": "Billing interval",
                    "type": "integer",
                    "example": 1
                },
                "cancellation_fee": {
                    "description": "Cancellation fee",
                    "type": "number",
                    "example": 0
                },
                "code": {
                    "description": "Plan code",
                    "type": "string",
                    "example": "premium-monthly"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "description": "Currency",
                    "type": "string",
                    "example": "CNY"
                },
                "default_server_group_id": {
                    "description": "Server Group Configuration (Single group per plan)",
                    "type": "integer"
                },
                "default_server_group_name": {
                    "description": "Default server group name",
                    "type": "string"
                },
                "description": {
                    "description": "Plan description",
                    "type": "string",
                    "example": "Premium features"
                },
                "features": {
                    "description": "Features JSON",
                    "type": "string"
                },
                "id": {
                    "description": "Plan ID",
                    "type": "integer",
                    "example": 1
                },
                "is_popular": {
                    "description": "Popular flag",
                    "type": "boolean",
                    "example": false
                },
                "is_recommended": {
                    "description": "Recommended flag",
                    "type": "boolean",
                    "example": true
                },
                "is_visible": {
                    "description": "Visibility",
                    "type": "boolean",
                    "example": true
                },
                "limits": {
                    "description": "Limits JSON",
                    "type": "string"
                },
                "name": {
                    "description": "Plan name",
                    "type": "string",
                    "example": "Premium Plan"
                },
                "price": {
                    "description": "Price",
                    "type": "number",
                    "example": 29.99
                },
                "setup_fee": {
                    "description": "Setup fee",
                    "type": "number",
                    "example": 0
                },
                "sort_order": {
                    "description": "Sort order",
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "description": "Status",
                    "type": "string",
                    "example": "active"
                },
                "traffic_limit": {
                    "description": "Traffic Configuration (Always enabled)",
                    "type": "integer",
                    "example": 107374182400
                },
                "traffic_limit_gb": {
                    "description": "Traffic limit in GB (calculated)",
                    "type": "number",
                    "example": 100
                },
                "traffic_limit_text": {
                    "description": "Human-readable traffic limit",
                    "type": "string",
                    "example": "100.0 GB"
                },
                "traffic_reset_cycle": {
                    "description": "Traffic reset cycle",
                    "type": "string",
                    "example": "monthly"
                },
                "trial_period_days": {
                    "description": "Trial period",
                    "type": "integer",
                    "example": 7
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "entities.TicketMessageResponse": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "string",
                    "example": "[{\"name\":\"screenshot.png\",\"url\":\"/uploads/screenshot.png\"}]"
                },
                "content": {
                    "type": "string",
                    "example": "Thank you for contacting support. We will review your issue."
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_internal": {
                    "type": "boolean",
                    "example": false
                },
                "message_type": {
                    "type": "string",
                    "example": "admin"
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"priority\": \"normal\"}"
                },
                "ticket_id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "user_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "entities.TicketMessageUserResponse": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "string",
                    "example": "[{\"name\":\"screenshot.png\",\"url\":\"/uploads/screenshot.png\"}]"
                },
                "content": {
                    "type": "string",
                    "example": "Thank you for contacting support. We will review your issue."
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message_type": {
                    "type": "string",
                    "example": "admin"
                },
                "ticket_id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                }
            }
        },
        "entities.TicketResponse": {
            "type": "object",
            "properties": {
                "assigned_at": {
                    "type": "string",
                    "example": "2024-01-01T10:00:00Z"
                },
                "assigned_to": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "assigned_to_id": {
                    "type": "integer",
                    "example": 2
                },
                "category": {
                    "type": "string",
                    "example": "subscription"
                },
                "closed_at": {
                    "type": "string",
                    "example": "2024-01-02T16:00:00Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T09:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "I am unable to access my premium subscription features"
                },
                "first_response_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_response_at": {
                    "type": "string",
                    "example": "2024-01-02T14:00:00Z"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.TicketMessageResponse"
                    }
                },
                "metadata": {
                    "type": "string",
                    "example": "{\"priority_escalated\": true}"
                },
                "priority": {
                    "type": "string",
                    "example": "normal"
                },
                "resolution": {
                    "type": "string",
                    "example": "Issue resolved by updating subscription settings"
                },
                "resolved_at": {
                    "type": "string",
                    "example": "2024-01-02T15:30:00Z"
                },
                "resolved_by": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "resolved_by_id": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "string",
                    "example": "open"
                },
                "tags": {
                    "type": "string",
                    "example": "urgent,subscription"
                },
                "ticket_no": {
                    "type": "string",
                    "example": "TKT-20240101-001"
                },
                "title": {
                    "type": "string",
                    "example": "Unable to access my subscription"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-02T16:00:00Z"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserBasicDTO"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "entities.TicketUserResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "subscription"
                },
                "closed_at": {
                    "type": "string",
                    "example": "2024-01-02T16:00:00Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T09:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "I am unable to access my premium subscription features"
                },
                "first_response_at": {
                    "type": "string",
                    "example": "2024-01-01T10:30:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_response_at": {
                    "type": "string",
                    "example": "2024-01-02T14:00:00Z"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.TicketMessageUserResponse"
                    }
                },
                "priority": {
                    "type": "string",
                    "example": "normal"
                },
                "resolution": {
                    "type": "string",
                    "example": "Issue resolved by updating subscription settings"
                },
                "status": {
                    "type": "string",
                    "example": "open"
                },
                "ticket_no": {
                    "type": "string",
                    "example": "TKT-20240101-001"
                },
                "title": {
                    "type": "string",
                    "example": "Unable to access my subscription"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-02T16:00:00Z"
                }
            }
        },
        "entities.UpdateBindingRequest": {
            "type": "object",
            "properties": {
                "is_primary": {
                    "type": "boolean",
                    "example": false
                },
                "provider_avatar": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "https://example.com/avatar.jpg"
                },
                "provider_data": {
                    "type": "string",
                    "example": "{\"extra\": \"data\"}"
                },
                "provider_email": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "user@example.com"
                },
                "provider_name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "User Name"
                },
                "provider_username": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "username"
                }
            }
        },
        "entities.UsageAlertResponse": {
            "type": "object",
            "properties": {
                "alert_configuration_id": {
                    "description": "Configuration ID",
                    "type": "integer",
                    "example": 1
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T12:00:00Z"
                },
                "current_usage": {
                    "description": "Current usage (bytes)",
                    "type": "integer",
                    "example": 8589934592
                },
                "duration_since_first_fired": {
                    "description": "Duration since first fired (as string)",
                    "type": "string",
                    "example": "30m"
                },
                "fired_at": {
                    "description": "When fired",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T12:00:00Z"
                },
                "id": {
                    "description": "Alert ID",
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "description": "Whether alert is active",
                    "type": "boolean",
                    "example": true
                },
                "is_resolved": {
                    "description": "Whether alert is resolved",
                    "type": "boolean",
                    "example": false
                },
                "last_notification_sent": {
                    "description": "Last notification time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T12:30:00Z"
                },
                "message": {
                    "description": "Alert message",
                    "type": "string",
                    "example": "Traffic usage has reached 80% of your limit"
                },
                "metadata": {
                    "description": "Additional metadata",
                    "type": "string"
                },
                "notification_channels": {
                    "description": "Notification channels used",
                    "type": "string"
                },
                "notification_results": {
                    "description": "Notification results",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.NotificationResult"
                    }
                },
                "notifications_sent": {
                    "description": "Notifications sent count",
                    "type": "integer",
                    "example": 3
                },
                "resolved_at": {
                    "description": "When resolved",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T13:00:00Z"
                },
                "severity": {
                    "description": "Alert severity",
                    "type": "string",
                    "example": "warning"
                },
                "status": {
                    "description": "Alert status",
                    "type": "string",
                    "example": "fired"
                },
                "threshold_value": {
                    "description": "Threshold that was exceeded",
                    "type": "number",
                    "example": 80
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T12:00:00Z"
                },
                "usage_limit": {
                    "description": "Usage limit (bytes)",
                    "type": "integer",
                    "example": 10737418240
                },
                "usage_percent": {
                    "description": "Usage percentage",
                    "type": "number",
                    "example": 80.5
                },
                "usage_type": {
                    "description": "Usage type",
                    "type": "string",
                    "example": "traffic"
                },
                "user_subscription_id": {
                    "description": "Subscription ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "entities.UsagePrediction": {
            "type": "object",
            "properties": {
                "based_on_days": {
                    "type": "integer"
                },
                "confidence": {
                    "type": "number"
                },
                "current_usage": {
                    "type": "integer"
                },
                "estimated_days_left": {
                    "description": "Days until limit reached",
                    "type": "integer"
                },
                "predicted_usage": {
                    "type": "integer"
                },
                "prediction_date": {
                    "type": "string"
                },
                "prediction_type": {
                    "description": "daily, weekly, monthly, period_end",
                    "type": "string"
                },
                "trend": {
                    "description": "increasing, decreasing, stable",
                    "type": "string"
                },
                "usage_type": {
                    "type": "string"
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "entities.UsageSummary": {
            "type": "object",
            "properties": {
                "generated_at": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "total_records": {
                    "type": "integer"
                },
                "total_usage": {
                    "type": "integer"
                },
                "usage_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/entities.UsageTypeStats"
                    }
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "entities.UsageTypeStats": {
            "type": "object",
            "properties": {
                "average_amount": {
                    "type": "number"
                },
                "first_usage": {
                    "type": "string"
                },
                "last_usage": {
                    "type": "string"
                },
                "max_amount": {
                    "type": "integer"
                },
                "min_amount": {
                    "type": "integer"
                },
                "record_count": {
                    "type": "integer"
                },
                "total_amount": {
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "entities.UserAccountBindingResponse": {
            "type": "object",
            "properties": {
                "bound_at": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp Fields",
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Primary Key",
                    "type": "integer"
                },
                "is_primary": {
                    "description": "Binding Status",
                    "type": "boolean"
                },
                "last_used_at": {
                    "type": "string"
                },
                "provider": {
                    "description": "Provider Information",
                    "type": "string"
                },
                "provider_avatar": {
                    "type": "string"
                },
                "provider_email": {
                    "description": "Provider User Data (only show non-sensitive data)",
                    "type": "string"
                },
                "provider_name": {
                    "type": "string"
                },
                "provider_user_id": {
                    "type": "string"
                },
                "provider_username": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entities.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp Fields",
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "description": "Core Identity Fields",
                    "type": "string"
                },
                "github_id": {
                    "type": "string"
                },
                "google_id": {
                    "description": "OAuth Provider IDs (only show if not empty)",
                    "type": "string"
                },
                "id": {
                    "description": "Primary Key",
                    "type": "integer"
                },
                "invite_code_id": {
                    "description": "Invite Code Fields",
                    "type": "integer"
                },
                "invite_code_used": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "description": "Authentication Fields (excluding password)",
                    "type": "string"
                },
                "provider_data": {
                    "description": "Provider Metadata (only show if not empty)",
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "telegram_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.UserSubscriptionResponse": {
            "type": "object",
            "properties": {
                "auto_renew": {
                    "description": "Auto renewal enabled",
                    "type": "boolean",
                    "example": true
                },
                "billing_cycle": {
                    "description": "Billing cycle",
                    "type": "string",
                    "example": "monthly"
                },
                "billing_interval": {
                    "description": "Billing interval",
                    "type": "integer",
                    "example": 1
                },
                "cancel_at_period_end": {
                    "description": "Cancel at period end",
                    "type": "boolean",
                    "example": false
                },
                "cancellation_reason": {
                    "description": "Cancellation reason",
                    "type": "string",
                    "example": "User request"
                },
                "cancelled_at": {
                    "description": "Cancelled date",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-06-01T00:00:00Z"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "currency": {
                    "description": "Currency",
                    "type": "string",
                    "example": "CNY"
                },
                "current_period_end": {
                    "description": "Current period end",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-02-01T00:00:00Z"
                },
                "current_period_start": {
                    "description": "Current period start",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "days_left": {
                    "description": "Days until expiry (-1 for lifetime)",
                    "type": "integer"
                },
                "end_date": {
                    "description": "End date",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-31T23:59:59Z"
                },
                "id": {
                    "description": "Subscription ID",
                    "type": "integer",
                    "example": 1
                },
                "is_expired": {
                    "description": "Expiry status",
                    "type": "boolean"
                },
                "is_in_trial": {
                    "description": "Computed fields",
                    "type": "boolean"
                },
                "is_max_pause_duration_exceeded": {
                    "description": "Whether max pause duration is exceeded",
                    "type": "boolean"
                },
                "is_paused": {
                    "description": "Pause status",
                    "type": "boolean"
                },
                "last_renewal_failed": {
                    "description": "Last renewal failure",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-10T10:30:00Z"
                },
                "last_used_at": {
                    "description": "Last used",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-15T10:30:00Z"
                },
                "max_pause_duration": {
                    "description": "Maximum pause duration in days",
                    "type": "integer",
                    "example": 90
                },
                "next_billing_date": {
                    "description": "Next billing",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-02-01T00:00:00Z"
                },
                "pause_duration_days": {
                    "description": "Current pause duration in days",
                    "type": "integer"
                },
                "pause_reason": {
                    "description": "Pause reason",
                    "type": "string",
                    "example": "User request"
                },
                "paused_at": {
                    "description": "Paused date",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-06-01T00:00:00Z"
                },
                "paused_by_admin_id": {
                    "description": "Admin who paused",
                    "type": "integer",
                    "example": 1
                },
                "price": {
                    "description": "Price",
                    "type": "number",
                    "example": 29.99
                },
                "remaining_pause_days": {
                    "description": "Remaining pause days before auto-resume",
                    "type": "integer"
                },
                "renewal_attempts": {
                    "description": "Renewal attempts count",
                    "type": "integer",
                    "example": 0
                },
                "renewal_fail_reason": {
                    "description": "Renewal failure reason",
                    "type": "string",
                    "example": "Payment failed"
                },
                "resumed_at": {
                    "description": "Resumed date",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-08-01T00:00:00Z"
                },
                "resumed_by_admin_id": {
                    "description": "Admin who resumed",
                    "type": "integer",
                    "example": 1
                },
                "start_date": {
                    "description": "Start date",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "status": {
                    "description": "Status",
                    "type": "string",
                    "example": "active"
                },
                "subscription_plan": {
                    "description": "Plan info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.SubscriptionPlanResponse"
                        }
                    ]
                },
                "subscription_plan_id": {
                    "description": "Plan ID",
                    "type": "integer",
                    "example": 1
                },
                "trial_end_date": {
                    "description": "Trial end",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-08T00:00:00Z"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user": {
                    "description": "Related data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserBasicDTO"
                        }
                    ]
                },
                "user_id": {
                    "description": "User ID",
                    "type": "integer",
                    "example": 1
                },
                "uuid": {
                    "description": "Unique identifier",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "handlers.AcknowledgeAlertRequest": {
            "type": "object",
            "properties": {
                "acknowledged_by": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.AdminAccountUnlockRequest": {
            "type": "object",
            "required": [
                "email",
                "reason"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "reason": {
                    "type": "string",
                    "example": "admin_unlock"
                }
            }
        },
        "handlers.AdminCreateInvoiceRequest": {
            "type": "object",
            "required": [
                "amount",
                "billing_email",
                "billing_name",
                "subscription_order_id",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 29.99
                },
                "auto_send": {
                    "type": "boolean",
                    "example": false
                },
                "billing_address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "billing_city": {
                    "type": "string",
                    "example": "New York"
                },
                "billing_country": {
                    "type": "string",
                    "example": "US"
                },
                "billing_email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "billing_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "billing_state": {
                    "type": "string",
                    "example": "NY"
                },
                "billing_zip": {
                    "type": "string",
                    "example": "10001"
                },
                "company_address": {
                    "type": "string",
                    "example": "456 Business Ave"
                },
                "company_name": {
                    "type": "string",
                    "example": "Acme Corp"
                },
                "company_tax_id": {
                    "type": "string",
                    "example": "12-3456789"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "description": {
                    "type": "string",
                    "example": "Monthly subscription"
                },
                "due_date": {
                    "type": "string",
                    "example": "2024-01-31"
                },
                "invoice_type": {
                    "type": "string",
                    "example": "standard"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "notes": {
                    "type": "string",
                    "example": "Admin created invoice"
                },
                "subscription_order_id": {
                    "type": "integer",
                    "example": 1
                },
                "tax_number": {
                    "type": "string",
                    "example": "GB123456789"
                },
                "tax_rate": {
                    "type": "number",
                    "example": 0.2
                },
                "tax_type": {
                    "type": "string",
                    "example": "VAT"
                },
                "template": {
                    "type": "string",
                    "example": "default"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.AdminCreateUserSubscriptionRequest": {
            "type": "object",
            "required": [
                "reason",
                "subscription_plan_id",
                "user_id"
            ],
            "properties": {
                "custom_traffic_limit": {
                    "description": "Custom Traffic Configuration (optional, overrides plan defaults)",
                    "type": "integer",
                    "example": 107374182400
                },
                "custom_traffic_reset_cycle": {
                    "description": "Custom reset cycle",
                    "type": "string",
                    "example": "monthly"
                },
                "disable_traffic_limit": {
                    "description": "Disable traffic limit for this subscription",
                    "type": "boolean",
                    "example": false
                },
                "notes": {
                    "description": "Admin notes",
                    "type": "string",
                    "maxLength": 1000
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Admin granted subscription"
                },
                "send_notification": {
                    "description": "Send notification to user",
                    "type": "boolean",
                    "example": true
                },
                "server_group_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "skip_payment": {
                    "description": "Administrative overrides",
                    "type": "boolean",
                    "example": true
                },
                "start_date": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "subscription_plan_id": {
                    "type": "integer",
                    "example": 1
                },
                "use_trial": {
                    "type": "boolean",
                    "example": false
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.AdminForcePasswordResetRequest": {
            "type": "object",
            "required": [
                "new_password",
                "user_id"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newSecurePassword123"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "handlers.AdminJWTRevokeRequest": {
            "type": "object",
            "required": [
                "reason",
                "token_hash"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "example": "admin_security_action"
                },
                "token_hash": {
                    "type": "string",
                    "example": "ab1c2d3e4f5g6h7i8j9k"
                }
            }
        },
        "handlers.AdminUpdateInvoiceRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 39.99
                },
                "billing_address": {
                    "type": "string",
                    "example": "456 Updated St"
                },
                "billing_city": {
                    "type": "string",
                    "example": "Los Angeles"
                },
                "billing_country": {
                    "type": "string",
                    "example": "US"
                },
                "billing_email": {
                    "type": "string",
                    "example": "jane@example.com"
                },
                "billing_name": {
                    "type": "string",
                    "example": "Jane Doe"
                },
                "billing_state": {
                    "type": "string",
                    "example": "CA"
                },
                "billing_zip": {
                    "type": "string",
                    "example": "90210"
                },
                "company_address": {
                    "type": "string",
                    "example": "789 Corporate Blvd"
                },
                "company_name": {
                    "type": "string",
                    "example": "Updated Corp"
                },
                "company_tax_id": {
                    "type": "string",
                    "example": "12-9876543"
                },
                "description": {
                    "type": "string",
                    "example": "Updated subscription"
                },
                "due_date": {
                    "type": "string",
                    "example": "2024-02-29"
                },
                "invoice_type": {
                    "type": "string",
                    "example": "credit_note"
                },
                "language": {
                    "type": "string",
                    "example": "es"
                },
                "notes": {
                    "type": "string",
                    "example": "Admin updated invoice"
                },
                "tax_number": {
                    "type": "string",
                    "example": "AU123456789"
                },
                "tax_rate": {
                    "type": "number",
                    "example": 0.15
                },
                "tax_type": {
                    "type": "string",
                    "example": "GST"
                },
                "template": {
                    "type": "string",
                    "example": "professional"
                }
            }
        },
        "handlers.AdminUpdateUserSubscriptionRequest": {
            "type": "object",
            "properties": {
                "auto_renew": {
                    "type": "boolean",
                    "example": true
                },
                "cancel_at_period_end": {
                    "type": "boolean",
                    "example": true
                },
                "cancellation_reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Admin action"
                },
                "end_date": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Admin notes"
                },
                "reset_traffic": {
                    "type": "boolean",
                    "example": false
                },
                "server_group_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "paused",
                        "cancelled",
                        "expired",
                        "trial"
                    ],
                    "example": "active"
                },
                "traffic_limit": {
                    "description": "Traffic configuration overrides",
                    "type": "integer",
                    "minimum": 0,
                    "example": 107374182400
                },
                "traffic_suspended": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.AdminUsageResetRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Admin reset per customer request"
                },
                "send_notification": {
                    "type": "boolean",
                    "example": true
                },
                "usage_type": {
                    "type": "string",
                    "example": "traffic"
                }
            }
        },
        "handlers.BatchUserIDsRequest": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "handlers.BulkInvoiceActionRequest": {
            "type": "object",
            "required": [
                "action",
                "invoice_ids"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "void",
                        "mark_paid",
                        "resend",
                        "regenerate_pdf"
                    ],
                    "example": "resend"
                },
                "invoice_ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Bulk operation notes"
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Bulk admin action"
                }
            }
        },
        "handlers.BulkSecurityActionRequest": {
            "type": "object",
            "required": [
                "action",
                "reason",
                "user_ids"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "example": "revoke_tokens"
                },
                "reason": {
                    "type": "string",
                    "example": "security_incident"
                },
                "user_ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                }
            }
        },
        "handlers.BulkSubscriptionActionRequest": {
            "type": "object",
            "required": [
                "action",
                "subscription_ids"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "pause",
                        "resume",
                        "cancel",
                        "extend",
                        "reset_traffic"
                    ],
                    "example": "pause"
                },
                "extend_by_days": {
                    "type": "integer",
                    "maximum": 365,
                    "minimum": 1
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Bulk admin action"
                },
                "subscription_ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "handlers.BulkUpdateRequestDoc": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "expired"
                    ]
                }
            }
        },
        "handlers.BulkUpdateServersRequest": {
            "type": "object",
            "required": [
                "ids",
                "updates"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "updates": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "handlers.CancelSubscriptionRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "cancel_at_period_end": {
                    "type": "boolean",
                    "example": true
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "No longer needed"
                }
            }
        },
        "handlers.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newPassword123"
                },
                "old_password": {
                    "type": "string",
                    "example": "oldPassword123"
                }
            }
        },
        "handlers.CreatePlanRequest": {
            "type": "object",
            "required": [
                "billing_cycle",
                "code",
                "currency",
                "default_server_group_ids",
                "name",
                "price",
                "traffic_limit",
                "traffic_reset_cycle"
            ],
            "properties": {
                "billing_cycle": {
                    "type": "string",
                    "enum": [
                        "monthly",
                        "yearly",
                        "lifetime"
                    ],
                    "example": "monthly"
                },
                "billing_interval": {
                    "type": "integer",
                    "maximum": 12,
                    "minimum": 1,
                    "example": 1
                },
                "cancellation_fee": {
                    "type": "number",
                    "example": 0
                },
                "code": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "premium-monthly"
                },
                "currency": {
                    "type": "string",
                    "example": "CNY"
                },
                "default_server_group_ids": {
                    "description": "Server Group Configuration (Required)",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Premium features with monthly billing"
                },
                "features": {
                    "type": "string",
                    "example": "{\"max_projects\": 10, \"storage_gb\": 100}"
                },
                "is_popular": {
                    "type": "boolean",
                    "example": false
                },
                "is_recommended": {
                    "type": "boolean",
                    "example": true
                },
                "is_visible": {
                    "type": "boolean",
                    "example": true
                },
                "limits": {
                    "type": "string",
                    "example": "{\"api_calls_per_month\": 10000}"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Premium Plan"
                },
                "price": {
                    "type": "number",
                    "minimum": 0,
                    "example": 29.99
                },
                "setup_fee": {
                    "type": "number",
                    "example": 0
                },
                "sort_order": {
                    "type": "integer",
                    "example": 1
                },
                "traffic_limit": {
                    "description": "Traffic Configuration (Required)",
                    "type": "integer",
                    "minimum": 0,
                    "example": 107374182400
                },
                "traffic_reset_cycle": {
                    "type": "string",
                    "enum": [
                        "monthly",
                        "never"
                    ],
                    "example": "monthly"
                },
                "trial_period_days": {
                    "type": "integer",
                    "maximum": 365,
                    "minimum": 0,
                    "example": 7
                }
            }
        },
        "handlers.CreateTaskRequest": {
            "type": "object",
            "required": [
                "payload",
                "type"
            ],
            "properties": {
                "payload": {
                    "type": "object"
                },
                "type": {
                    "type": "string",
                    "example": "email"
                }
            }
        },
        "handlers.ExtendSubscriptionRequest": {
            "type": "object",
            "required": [
                "extend_by_days",
                "reason"
            ],
            "properties": {
                "extend_by_days": {
                    "type": "integer",
                    "maximum": 3650,
                    "minimum": 1,
                    "example": 30
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Customer loyalty bonus"
                },
                "send_notification": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.MarkPaidRequest": {
            "type": "object",
            "properties": {
                "notes": {
                    "type": "string",
                    "example": "Manual payment verification"
                },
                "payment_date": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-01-15T10:30:00Z"
                },
                "payment_method": {
                    "type": "string",
                    "example": "bank_transfer"
                },
                "payment_reference": {
                    "type": "string",
                    "example": "TXN123456"
                },
                "send_notification": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.PatchUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "banned"
                    ],
                    "example": "active"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "handlers.RegeneratePDFRequest": {
            "type": "object",
            "properties": {
                "custom_fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "template": {
                    "type": "string",
                    "example": "professional"
                },
                "watermark": {
                    "type": "string",
                    "example": "PAID"
                }
            }
        },
        "handlers.ResendInvoiceRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please find your invoice attached"
                },
                "send_copy": {
                    "type": "boolean",
                    "example": true
                },
                "subject": {
                    "type": "string",
                    "example": "Invoice Reminder"
                },
                "to_email": {
                    "type": "string",
                    "example": "customer@example.com"
                }
            }
        },
        "handlers.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 6,
                    "example": "newSecurePassword123"
                }
            }
        },
        "handlers.ResolveAlertRequest": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "example": "Issue fixed"
                }
            }
        },
        "handlers.SecurityNotificationRequest": {
            "type": "object",
            "required": [
                "message",
                "subject",
                "user_ids"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Your account security has been updated"
                },
                "subject": {
                    "type": "string",
                    "maxLength": 200,
                    "example": "Security Alert"
                },
                "user_ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                }
            }
        },
        "handlers.SuppressAlertRequest": {
            "type": "object",
            "required": [
                "duration_minutes",
                "reason"
            ],
            "properties": {
                "duration_minutes": {
                    "type": "integer",
                    "example": 60
                },
                "reason": {
                    "type": "string",
                    "example": "Maintenance window"
                }
            }
        },
        "handlers.UniProxyBaseConfig": {
            "type": "object",
            "properties": {
                "pull_interval": {
                    "type": "integer"
                },
                "push_interval": {
                    "type": "integer"
                }
            }
        },
        "handlers.UniProxyConfigResponse": {
            "type": "object",
            "properties": {
                "base_config": {
                    "$ref": "#/definitions/handlers.UniProxyBaseConfig"
                },
                "cipher": {
                    "type": "string"
                },
                "obfs": {
                    "type": "string",
                    "example": "tls1.2_ticket_auth"
                },
                "obfs_settings": {
                    "type": "string",
                    "example": "cloudflare.com"
                },
                "server_port": {
                    "type": "integer"
                }
            }
        },
        "handlers.UniProxyUserItem": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Subscription ID",
                    "type": "integer"
                },
                "speed_limit": {
                    "description": "Speed limit (null for unlimited)",
                    "type": "integer",
                    "example": 100
                },
                "uuid": {
                    "description": "Subscription UUID",
                    "type": "string"
                }
            }
        },
        "handlers.UniProxyUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.UniProxyUserItem"
                    }
                }
            }
        },
        "handlers.UpdatePlanRequest": {
            "type": "object",
            "properties": {
                "cancellation_fee": {
                    "type": "number",
                    "example": 25
                },
                "default_server_group_ids": {
                    "description": "Server Group Configuration",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Updated description"
                },
                "features": {
                    "type": "string",
                    "example": "{\"max_projects\": 20}"
                },
                "is_popular": {
                    "type": "boolean",
                    "example": true
                },
                "is_recommended": {
                    "type": "boolean",
                    "example": false
                },
                "is_visible": {
                    "type": "boolean",
                    "example": true
                },
                "limits": {
                    "type": "string",
                    "example": "{\"api_calls_per_month\": 20000}"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Premium Plan Updated"
                },
                "price": {
                    "type": "number",
                    "minimum": 0,
                    "example": 39.99
                },
                "setup_fee": {
                    "type": "number",
                    "example": 10
                },
                "sort_order": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "archived"
                    ],
                    "example": "active"
                },
                "traffic_limit": {
                    "description": "Traffic Configuration",
                    "type": "integer",
                    "minimum": 0,
                    "example": 107374182400
                },
                "traffic_reset_cycle": {
                    "type": "string",
                    "enum": [
                        "monthly",
                        "never"
                    ],
                    "example": "monthly"
                },
                "trial_period_days": {
                    "type": "integer",
                    "maximum": 365,
                    "minimum": 0,
                    "example": 14
                }
            }
        },
        "handlers.UpdateServerStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "maintenance"
                    ],
                    "example": "active"
                }
            }
        },
        "handlers.UpdateUserRoleRequest": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "type": "string",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                }
            }
        },
        "handlers.UpdateUserStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "banned"
                    ],
                    "example": "active"
                }
            }
        },
        "handlers.UserProfileUpdateRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.VoidInvoiceRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Customer requested cancellation"
                },
                "send_notification": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "interfaces.AlertDistribution": {
            "type": "object",
            "properties": {
                "by_day_of_week": {
                    "description": "Day of week (0-6)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "by_hour": {
                    "description": "Hour of day (0-23)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "by_severity": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "by_status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "by_usage_type": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            }
        },
        "interfaces.AlertHistoryEntry": {
            "type": "object",
            "properties": {
                "acknowledged_at": {
                    "type": "string"
                },
                "acknowledged_by": {
                    "type": "integer"
                },
                "alert": {
                    "$ref": "#/definitions/entities.UsageAlertResponse"
                },
                "configuration": {
                    "$ref": "#/definitions/entities.AlertConfigurationResponse"
                },
                "notification_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.NotificationResult"
                    }
                },
                "resolution_time": {
                    "type": "string"
                }
            }
        },
        "interfaces.AlertHistoryResponse": {
            "type": "object",
            "properties": {
                "alert_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.AlertHistoryEntry"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/interfaces.PaginationInfo"
                },
                "summary": {
                    "$ref": "#/definitions/interfaces.AlertHistorySummary"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "interfaces.AlertHistorySummary": {
            "type": "object",
            "properties": {
                "average_resolution_time": {
                    "type": "string"
                },
                "fastest_resolution": {
                    "type": "string"
                },
                "notification_failures": {
                    "type": "integer"
                },
                "notifications_sent": {
                    "type": "integer"
                },
                "slowest_resolution": {
                    "type": "string"
                },
                "total_alerts": {
                    "type": "integer"
                },
                "unresolved_count": {
                    "type": "integer"
                }
            }
        },
        "interfaces.AlertStatisticsResponse": {
            "type": "object",
            "properties": {
                "distribution": {
                    "$ref": "#/definitions/interfaces.AlertDistribution"
                },
                "generated_at": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "summary": {
                    "$ref": "#/definitions/interfaces.AlertsSummary"
                },
                "top_configurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.TopAlertConfiguration"
                    }
                },
                "trends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.AlertTrendEntry"
                    }
                }
            }
        },
        "interfaces.AlertTrendEntry": {
            "type": "object",
            "properties": {
                "alert_count": {
                    "type": "integer"
                },
                "period": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "interfaces.AlertsSummary": {
            "type": "object",
            "properties": {
                "active_alerts": {
                    "type": "integer"
                },
                "alerts_this_month": {
                    "type": "integer"
                },
                "alerts_this_week": {
                    "type": "integer"
                },
                "alerts_today": {
                    "type": "integer"
                },
                "critical_alerts": {
                    "type": "integer"
                },
                "high_alerts": {
                    "type": "integer"
                },
                "low_alerts": {
                    "type": "integer"
                },
                "medium_alerts": {
                    "type": "integer"
                },
                "resolved_alerts": {
                    "type": "integer"
                },
                "total_alerts": {
                    "type": "integer"
                }
            }
        },
        "interfaces.BulkResolveAlertsRequest": {
            "type": "object",
            "required": [
                "alert_ids"
            ],
            "properties": {
                "alert_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "reason": {
                    "type": "string"
                },
                "resolved_by": {
                    "type": "integer"
                },
                "usage_type": {
                    "type": "string"
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.BulkResolveAlertsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failed_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "resolved_count": {
                    "type": "integer"
                }
            }
        },
        "interfaces.CleanupResult": {
            "type": "object",
            "properties": {
                "alerts_deleted": {
                    "type": "integer"
                },
                "completed_at": {
                    "type": "string"
                },
                "operation_time": {
                    "type": "string"
                },
                "records_deleted": {
                    "type": "integer"
                },
                "space_freed": {
                    "description": "in bytes",
                    "type": "integer"
                }
            }
        },
        "interfaces.CreateAlertConfigRequest": {
            "type": "object",
            "required": [
                "name",
                "threshold",
                "threshold_type",
                "usage_type",
                "user_subscription_id"
            ],
            "properties": {
                "cooldown_minutes": {
                    "description": "1 minute to 1 week",
                    "type": "integer",
                    "maximum": 10080,
                    "minimum": 1
                },
                "description": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "notification_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.NotificationChannel"
                    }
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "medium",
                        "high",
                        "critical"
                    ]
                },
                "threshold": {
                    "type": "number",
                    "minimum": 0
                },
                "threshold_type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "absolute"
                    ]
                },
                "usage_type": {
                    "type": "string"
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.CurrentUsageDetails": {
            "type": "object",
            "properties": {
                "current_usage": {
                    "type": "integer"
                },
                "is_exceeded": {
                    "type": "boolean"
                },
                "is_unlimited": {
                    "type": "boolean"
                },
                "last_recorded": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "record_count": {
                    "type": "integer"
                },
                "remaining_usage": {
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_percent": {
                    "type": "number"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "interfaces.CurrentUsageResponse": {
            "type": "object",
            "properties": {
                "last_updated": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "total_usage": {
                    "type": "integer"
                },
                "usage_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/interfaces.CurrentUsageDetails"
                    }
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.DowngradeSubscriptionRequest": {
            "type": "object",
            "required": [
                "new_subscription_plan_id",
                "subscription_id"
            ],
            "properties": {
                "apply_at_period_end": {
                    "description": "Whether to apply change at current period end",
                    "type": "boolean",
                    "example": true
                },
                "effective_date": {
                    "description": "When to apply the change, empty means end of current period",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "new_subscription_plan_id": {
                    "type": "integer",
                    "example": 1
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "User requested downgrade"
                },
                "subscription_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "interfaces.ExportUsageRequest": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "format": {
                    "description": "csv, json, xlsx",
                    "type": "string"
                },
                "granularity": {
                    "type": "string"
                },
                "include_metadata": {
                    "type": "boolean"
                },
                "include_raw_data": {
                    "type": "boolean"
                },
                "start_time": {
                    "type": "string"
                },
                "usage_type": {
                    "type": "string"
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.ExportUsageResponse": {
            "type": "object",
            "properties": {
                "download_url": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "format": {
                    "type": "string"
                },
                "generated_at": {
                    "type": "string"
                },
                "record_count": {
                    "type": "integer"
                }
            }
        },
        "interfaces.GetAlertConfigsResponse": {
            "type": "object",
            "properties": {
                "alert_configurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.AlertConfigurationResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/interfaces.PaginationInfo"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "interfaces.GetUsageAlertsResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/interfaces.PaginationInfo"
                },
                "summary": {
                    "$ref": "#/definitions/interfaces.AlertsSummary"
                },
                "total_count": {
                    "type": "integer"
                },
                "usage_alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.UsageAlertResponse"
                    }
                }
            }
        },
        "interfaces.PaginationInfo": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "has_next": {
                    "type": "boolean"
                },
                "has_previous": {
                    "type": "boolean"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "interfaces.PauseSubscriptionRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "max_pause_duration": {
                    "description": "Override default max pause duration",
                    "type": "integer",
                    "maximum": 365,
                    "minimum": 1,
                    "example": 90
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "User requested pause"
                }
            }
        },
        "interfaces.RealTimeUsageData": {
            "type": "object",
            "properties": {
                "current_usage": {
                    "type": "integer"
                },
                "estimated_time_left": {
                    "description": "Time until limit reached (as string)",
                    "type": "string"
                },
                "is_exceeded": {
                    "type": "boolean"
                },
                "is_near_limit": {
                    "type": "boolean"
                },
                "last_updated": {
                    "type": "string"
                },
                "recent_usage": {
                    "description": "Usage in last hour",
                    "type": "integer"
                },
                "remaining_usage": {
                    "type": "integer"
                },
                "trend_direction": {
                    "type": "string"
                },
                "usage_limit": {
                    "type": "integer"
                },
                "usage_percent": {
                    "type": "number"
                },
                "usage_rate": {
                    "description": "Usage per hour",
                    "type": "number"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "interfaces.RealTimeUsageResponse": {
            "type": "object",
            "properties": {
                "alert_count": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "string"
                },
                "predictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.UsagePrediction"
                    }
                },
                "update_frequency": {
                    "type": "string"
                },
                "usage_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/interfaces.RealTimeUsageData"
                    }
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.ResumeSubscriptionRequest": {
            "type": "object",
            "properties": {
                "adjust_billing_date": {
                    "description": "Whether to adjust billing dates based on pause duration",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "interfaces.TestNotificationRequest": {
            "type": "object",
            "required": [
                "channel",
                "user_subscription_id"
            ],
            "properties": {
                "channel": {
                    "$ref": "#/definitions/entities.NotificationChannel"
                },
                "test_message": {
                    "type": "string"
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.TestNotificationResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "response_time": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "interfaces.TopAlertConfiguration": {
            "type": "object",
            "properties": {
                "alert_count": {
                    "type": "integer"
                },
                "average_resolution_time": {
                    "type": "string"
                },
                "configuration_id": {
                    "type": "integer"
                },
                "last_alert_fired": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "interfaces.TopUsageResponse": {
            "type": "object",
            "properties": {
                "generated_at": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "top_subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.TopUsageSubscription"
                    }
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "interfaces.TopUsageSubscription": {
            "type": "object",
            "properties": {
                "average_usage": {
                    "type": "number"
                },
                "peak_usage": {
                    "type": "integer"
                },
                "period": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "record_count": {
                    "type": "integer"
                },
                "total_usage": {
                    "type": "integer"
                },
                "usage_type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.TrendSummary": {
            "type": "object",
            "properties": {
                "anomaly_count": {
                    "type": "integer"
                },
                "average_usage": {
                    "type": "number"
                },
                "lowest_usage": {
                    "type": "integer"
                },
                "lowest_usage_time": {
                    "type": "string"
                },
                "overall_trend": {
                    "description": "increasing, decreasing, stable",
                    "type": "string"
                },
                "peak_usage": {
                    "type": "integer"
                },
                "peak_usage_time": {
                    "type": "string"
                },
                "predicted_growth_rate": {
                    "description": "% per period",
                    "type": "number"
                },
                "trend_strength": {
                    "description": "0-1 scale",
                    "type": "number"
                },
                "variability_score": {
                    "description": "0-1 scale",
                    "type": "number"
                }
            }
        },
        "interfaces.UpdateAlertConfigRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "cooldown_minutes": {
                    "type": "integer",
                    "maximum": 10080,
                    "minimum": 1
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "notification_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.NotificationChannel"
                    }
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "medium",
                        "high",
                        "critical"
                    ]
                },
                "threshold": {
                    "type": "number",
                    "minimum": 0
                },
                "threshold_type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "absolute"
                    ]
                }
            }
        },
        "interfaces.UpgradeSubscriptionRequest": {
            "type": "object",
            "required": [
                "new_subscription_plan_id",
                "subscription_id"
            ],
            "properties": {
                "effective_date": {
                    "description": "When to apply the change, empty means immediate",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "new_subscription_plan_id": {
                    "type": "integer",
                    "example": 2
                },
                "pro_rate_charges": {
                    "description": "Whether to calculate pro-rated charges",
                    "type": "boolean",
                    "example": true
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "User requested upgrade"
                },
                "subscription_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "interfaces.UsageAnomaly": {
            "type": "object",
            "properties": {
                "actual_usage": {
                    "type": "integer"
                },
                "anomaly_type": {
                    "description": "spike, drop, pattern_change",
                    "type": "string"
                },
                "confidence": {
                    "type": "number"
                },
                "deviation_score": {
                    "type": "number"
                },
                "expected_usage": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "interfaces.UsageHistoryEntry": {
            "type": "object",
            "properties": {
                "period": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "record_count": {
                    "type": "integer"
                },
                "total_usage": {
                    "type": "integer"
                },
                "usage_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/entities.UsageTypeStats"
                    }
                }
            }
        },
        "interfaces.UsageHistoryResponse": {
            "type": "object",
            "properties": {
                "granularity": {
                    "type": "string"
                },
                "pagination": {
                    "$ref": "#/definitions/interfaces.PaginationInfo"
                },
                "summary": {
                    "$ref": "#/definitions/entities.UsageSummary"
                },
                "total_records": {
                    "type": "integer"
                },
                "usage_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.UsageHistoryEntry"
                    }
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.UsageStatistics": {
            "type": "object",
            "properties": {
                "average_usage": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "generated_at": {
                    "type": "string"
                },
                "peak_usage": {
                    "type": "integer"
                },
                "peak_usage_time": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "total_records": {
                    "type": "integer"
                },
                "total_usage": {
                    "type": "integer"
                },
                "usage_by_day_of_week": {
                    "description": "Day of week (0-6) -\u003e usage",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "usage_by_hour": {
                    "description": "Hour of day (0-23) -\u003e usage",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "usage_by_source": {
                    "description": "Source type -\u003e usage",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "usage_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/entities.UsageTypeStats"
                    }
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "interfaces.UsageTrendEntry": {
            "type": "object",
            "properties": {
                "moving_avg": {
                    "type": "number"
                },
                "record_count": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "trend_direction": {
                    "description": "up, down, stable",
                    "type": "string"
                },
                "usage_amount": {
                    "type": "integer"
                },
                "usage_type": {
                    "type": "string"
                }
            }
        },
        "interfaces.UsageTrendsResponse": {
            "type": "object",
            "properties": {
                "anomalies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.UsageAnomaly"
                    }
                },
                "granularity": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "predictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.UsagePrediction"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/interfaces.TrendSummary"
                },
                "trends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interfaces.UsageTrendEntry"
                    }
                },
                "user_subscription_id": {
                    "type": "integer"
                }
            }
        },
        "notification.ChannelAnalytics": {
            "type": "object",
            "properties": {
                "average_delivery_time": {
                    "type": "string"
                },
                "channel": {
                    "$ref": "#/definitions/notification.NotificationChannel"
                },
                "failed": {
                    "type": "integer"
                },
                "success_rate": {
                    "type": "number"
                },
                "successful": {
                    "type": "integer"
                },
                "top_failure_reasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.FailureReason"
                    }
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "notification.DeliveryAttempt": {
            "type": "object",
            "properties": {
                "attempt_number": {
                    "type": "integer"
                },
                "channel": {
                    "$ref": "#/definitions/notification.NotificationChannel"
                },
                "completed_at": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "provider_response": {
                    "$ref": "#/definitions/notification.ProviderResponse"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/notification.NotificationStatus"
                }
            }
        },
        "notification.EventTypeAnalytics": {
            "type": "object",
            "properties": {
                "average_delivery_time": {
                    "type": "string"
                },
                "event_type": {
                    "type": "string"
                },
                "preferred_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.NotificationChannel"
                    }
                },
                "success_rate": {
                    "type": "number"
                },
                "total_notifications": {
                    "type": "integer"
                }
            }
        },
        "notification.FailureReason": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "notification.HourlyStats": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "hour": {
                    "type": "integer"
                },
                "success_rate": {
                    "type": "number"
                }
            }
        },
        "notification.NotificationAnalytics": {
            "type": "object",
            "properties": {
                "average_delivery_time": {
                    "type": "string"
                },
                "channel_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/notification.ChannelAnalytics"
                    }
                },
                "event_type_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/notification.EventTypeAnalytics"
                    }
                },
                "generated_at": {
                    "type": "string"
                },
                "hourly_distribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.HourlyStats"
                    }
                },
                "success_rate": {
                    "type": "number"
                },
                "time_range": {
                    "$ref": "#/definitions/notification.TimeRange"
                },
                "top_failure_reasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.FailureReason"
                    }
                },
                "total_notifications": {
                    "type": "integer"
                }
            }
        },
        "notification.NotificationChannel": {
            "type": "string",
            "enum": [
                "email",
                "sms",
                "push",
                "slack",
                "telegram"
            ],
            "x-enum-varnames": [
                "ChannelEmail",
                "ChannelSMS",
                "ChannelPush",
                "ChannelSlack",
                "ChannelTelegram"
            ]
        },
        "notification.NotificationPriority": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "PriorityLow",
                "PriorityNormal",
                "PriorityHigh",
                "PriorityUrgent"
            ]
        },
        "notification.NotificationStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusSending",
                "StatusSent",
                "StatusDelivered",
                "StatusFailed",
                "StatusRetrying",
                "StatusExpired",
                "StatusCancelled"
            ]
        },
        "notification.NotificationStatusSummary": {
            "type": "object",
            "properties": {
                "failed_notifications": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "string"
                },
                "pending_notifications": {
                    "type": "integer"
                },
                "recent_activity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.RecentNotificationActivity"
                    }
                },
                "retrying_notifications": {
                    "type": "integer"
                },
                "sent_notifications": {
                    "type": "integer"
                },
                "total_notifications": {
                    "type": "integer"
                }
            }
        },
        "notification.NotificationTrackingInfo": {
            "type": "object",
            "properties": {
                "channel_attempts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/notification.DeliveryAttempt"
                        }
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_type": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "failed_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.NotificationChannel"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "overall_status": {
                    "$ref": "#/definitions/notification.NotificationStatus"
                },
                "priority": {
                    "$ref": "#/definitions/notification.NotificationPriority"
                },
                "request_id": {
                    "type": "string"
                },
                "retrying_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.NotificationChannel"
                    }
                },
                "successful_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.NotificationChannel"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_attempts": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "notification.ProviderResponse": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "type": "object",
                    "additionalProperties": true
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message_id": {
                    "type": "string"
                },
                "provider_id": {
                    "type": "string"
                },
                "response_body": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "notification.RecentNotificationActivity": {
            "type": "object",
            "properties": {
                "channel": {
                    "$ref": "#/definitions/notification.NotificationChannel"
                },
                "description": {
                    "type": "string"
                },
                "event_type": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/notification.NotificationStatus"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "notification.TimeRange": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "notification.UserNotificationHistoryResponse": {
            "type": "object",
            "properties": {
                "event_type": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.NotificationTrackingInfo"
                    }
                },
                "retrieved_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "response.BadRequestResponse": {
            "description": "Bad Request problem response format",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "{\"email\"": "\"Invalid email format\"}"
                    }
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v1/users"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                },
                "title": {
                    "type": "string",
                    "example": "Bad Request"
                },
                "type": {
                    "type": "string",
                    "example": "/problems/bad-request"
                }
            }
        },
        "response.ConflictResponse": {
            "description": "Conflict problem response format",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "A user with this email already exists"
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v1/users"
                },
                "status": {
                    "type": "integer",
                    "example": 409
                },
                "title": {
                    "type": "string",
                    "example": "Conflict"
                },
                "type": {
                    "type": "string",
                    "example": "/problems/conflict"
                }
            }
        },
        "response.ForbiddenResponse": {
            "description": "Forbidden problem response format",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Access to this resource is denied"
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v1/admin/users"
                },
                "status": {
                    "type": "integer",
                    "example": 403
                },
                "title": {
                    "type": "string",
                    "example": "Forbidden"
                },
                "type": {
                    "type": "string",
                    "example": "/problems/forbidden"
                }
            }
        },
        "response.HALCollectionResponse": {
            "description": "HAL-style collection response format",
            "type": "object",
            "properties": {
                "_embedded": {
                    "description": "Embedded resources",
                    "type": "object"
                },
                "_links": {
                    "description": "Navigation links",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.HALLinksSwagger"
                        }
                    ]
                },
                "page": {
                    "description": "Page information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.PageInfoSwagger"
                        }
                    ]
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "response.HALLinkSwagger": {
            "description": "HAL link structure",
            "type": "object",
            "properties": {
                "href": {
                    "description": "Link URL",
                    "type": "string",
                    "example": "/api/v1/users/1"
                },
                "templated": {
                    "description": "Whether the link is templated",
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "description": "Human-readable title",
                    "type": "string",
                    "example": "User Profile"
                },
                "type": {
                    "description": "Media type hint",
                    "type": "string",
                    "example": "application/json"
                }
            }
        },
        "response.HALLinksSwagger": {
            "description": "HAL navigation links structure",
            "type": "object",
            "properties": {
                "first": {
                    "description": "First page link",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.HALLinkSwagger"
                        }
                    ]
                },
                "last": {
                    "description": "Last page link",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.HALLinkSwagger"
                        }
                    ]
                },
                "next": {
                    "description": "Next page link",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.HALLinkSwagger"
                        }
                    ]
                },
                "prev": {
                    "description": "Previous page link",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.HALLinkSwagger"
                        }
                    ]
                },
                "self": {
                    "description": "Self link",
                    "allOf": [
                        {
                            "$ref": "#/definitions/response.HALLinkSwagger"
                        }
                    ]
                }
            }
        },
        "response.InternalServerErrorResponse": {
            "description": "Internal Server Error problem response format",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "An internal server error occurred"
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v1/users"
                },
                "status": {
                    "type": "integer",
                    "example": 500
                },
                "title": {
                    "type": "string",
                    "example": "Internal Server Error"
                },
                "type": {
                    "type": "string",
                    "example": "/problems/internal-server-error"
                }
            }
        },
        "response.NotFoundResponse": {
            "description": "Not Found problem response format",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "The requested resource was not found"
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v1/users/123"
                },
                "status": {
                    "type": "integer",
                    "example": 404
                },
                "title": {
                    "type": "string",
                    "example": "Not Found"
                },
                "type": {
                    "type": "string",
                    "example": "/problems/not-found"
                }
            }
        },
        "response.PageInfoSwagger": {
            "description": "Pagination metadata structure",
            "type": "object",
            "properties": {
                "number": {
                    "description": "Current page number (0-based)",
                    "type": "integer",
                    "example": 0
                },
                "size": {
                    "description": "Items per page",
                    "type": "integer",
                    "example": 10
                },
                "totalElements": {
                    "description": "Total number of elements",
                    "type": "integer",
                    "example": 100
                },
                "totalPages": {
                    "description": "Total number of pages",
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "response.ProblemJSONResponse": {
            "description": "RFC 9457 Problem Details for HTTP APIs",
            "type": "object",
            "properties": {
                "detail": {
                    "description": "Detailed explanation",
                    "type": "string",
                    "example": "The user with id 123 was not found"
                },
                "instance": {
                    "description": "Problem instance URI",
                    "type": "string",
                    "example": "/api/v1/users/123"
                },
                "status": {
                    "description": "HTTP status code",
                    "type": "integer",
                    "example": 404
                },
                "title": {
                    "description": "Short summary",
                    "type": "string",
                    "example": "Not Found"
                },
                "type": {
                    "description": "Problem type URI",
                    "type": "string",
                    "example": "/problems/not-found"
                }
            }
        },
        "response.StandardResponse": {
            "description": "DEPRECATED: Standard API response format",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Response code (0 for success, non-zero for errors)",
                    "type": "integer",
                    "example": 0
                },
                "data": {
                    "description": "Response data (optional)",
                    "type": "object"
                },
                "message": {
                    "description": "Response message",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.UnauthorizedResponse": {
            "description": "Unauthorized problem response format",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Authentication credentials are required"
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v1/users"
                },
                "status": {
                    "type": "integer",
                    "example": 401
                },
                "title": {
                    "type": "string",
                    "example": "Unauthorized"
                },
                "type": {
                    "type": "string",
                    "example": "/problems/unauthorized"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}